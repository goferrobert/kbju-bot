from telegram import Update
from telegram.ext import (
    ContextTypes, ConversationHandler,
    CallbackQueryHandler, MessageHandler, filters
)
from datetime import datetime
from math import log10

from app.handlers.base import BaseHandler
from app.handlers.fsm_states import UserStates
from app.db.models import User, UserRecord
from app.utils.validation import ValidationError
from app.utils.logging import get_logger

from app.modules.kbju import calculate_kbju
from app.modules.my_data import show_user_summary
from app.modules.invite import send_consultation_invite
from app.modules.goals import show_goal_analysis, show_goal_kbju

logger = get_logger(__name__)

class BodyFatHandler(BaseHandler):
    """Handler for body fat calculations."""

    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
    BODYFAT_CONSTANTS = {
        "male": {
            "a": 495,
            "b": 1.0324,
            "c": 0.19077,
            "d": 0.15456
        },
        "female": {
            "a": 495,
            "b": 1.29579,
            "c": 0.35004,
            "d": 0.22100
        }
    }

    def __init__(self):
        super().__init__()
        self.handler = ConversationHandler(
            entry_points=[CallbackQueryHandler(self.start_body_fat_calc, pattern="^measure_fat$")],
            states={
                UserStates.WAITING_FOR_WAIST: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_waist)
                ],
                UserStates.WAITING_FOR_NECK: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_neck)
                ],
                UserStates.WAITING_FOR_HIPS: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_hips)
                ],
            },
            fallbacks=[]
        )

    @BaseHandler.handle_errors
    async def start_body_fat_calc(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ù–∞—á–∞–ª–æ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∂–∏—Ä–∞"""
        user = await self.get_user(update.effective_user.id)
        if not user or not user.sex or not user.height:
            await self.send_message(
                update,
                "‚ùå <b>–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏ –∞–Ω–∫–µ—Ç—É</b> —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.",
                parse_mode="HTML"
            )
            return ConversationHandler.END

        self.set_user_data(context, "bodyfat", {
            "sex": user.sex,
            "height": user.height
        })

        await self.send_message(
            update,
            "üìè <b>–í–≤–µ–¥–∏ –æ–±—Ö–≤–∞—Ç —Ç–∞–ª–∏–∏</b> (–≤ —Å–º):",
            parse_mode="HTML"
        )
        return UserStates.WAITING_FOR_WAIST

    @BaseHandler.handle_errors
    async def handle_waist(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–±—Ö–≤–∞—Ç–∞ —Ç–∞–ª–∏–∏"""
        try:
            waist = float(update.message.text.strip())
            if not 30 <= waist <= 200:
                raise ValidationError("–û–±—Ö–≤–∞—Ç —Ç–∞–ª–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 30 –¥–æ 200 —Å–º")

            bodyfat_data = self.get_user_data(context, "bodyfat", {})
            bodyfat_data["waist"] = waist
            self.set_user_data(context, "bodyfat", bodyfat_data)

            await self.send_message(
                update,
                "üìè <b>–í–≤–µ–¥–∏ –æ–±—Ö–≤–∞—Ç —à–µ–∏</b> (–≤ —Å–º):",
                parse_mode="HTML"
            )
            return UserStates.WAITING_FOR_NECK
        except ValueError:
            await self.send_message(
                update,
                "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ"
            )
            return UserStates.WAITING_FOR_WAIST
        except ValidationError as e:
            await self.send_message(update, f"‚ùå {str(e)}")
            return UserStates.WAITING_FOR_WAIST

    @BaseHandler.handle_errors
    async def handle_neck(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–±—Ö–≤–∞—Ç–∞ —à–µ–∏"""
        try:
            neck = float(update.message.text.strip())
            if not 20 <= neck <= 100:
                raise ValidationError("–û–±—Ö–≤–∞—Ç —à–µ–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 20 –¥–æ 100 —Å–º")

            bodyfat_data = self.get_user_data(context, "bodyfat", {})
            bodyfat_data["neck"] = neck
            self.set_user_data(context, "bodyfat", bodyfat_data)

            if bodyfat_data.get("sex") == "–∂–µ–Ω—Å–∫–∏–π":
                await self.send_message(
                    update,
                    "üìè <b>–í–≤–µ–¥–∏ –æ–±—Ö–≤–∞—Ç –±—ë–¥–µ—Ä</b> (–≤ —Å–º):",
                    parse_mode="HTML"
                )
                return UserStates.WAITING_FOR_HIPS

            return await self.calculate_body_fat(update, context)
        except ValueError:
            await self.send_message(
                update,
                "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ"
            )
            return UserStates.WAITING_FOR_NECK
        except ValidationError as e:
            await self.send_message(update, f"‚ùå {str(e)}")
            return UserStates.WAITING_FOR_NECK

    @BaseHandler.handle_errors
    async def handle_hips(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–±—Ö–≤–∞—Ç–∞ –±–µ–¥–µ—Ä"""
        try:
            hips = float(update.message.text.strip())
            if not 30 <= hips <= 200:
                raise ValidationError("–û–±—Ö–≤–∞—Ç –±—ë–¥–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 30 –¥–æ 200 —Å–º")

            bodyfat_data = self.get_user_data(context, "bodyfat", {})
            bodyfat_data["hips"] = hips
            self.set_user_data(context, "bodyfat", bodyfat_data)

            return await self.calculate_body_fat(update, context)
        except ValueError:
            await self.send_message(
                update,
                "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ"
            )
            return UserStates.WAITING_FOR_HIPS
        except ValidationError as e:
            await self.send_message(update, f"‚ùå {str(e)}")
            return UserStates.WAITING_FOR_HIPS

    def calculate_body_fat_percentage(self, sex: str, height: float, waist: float, neck: float, hips: float = None) -> float:
        """
        –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∂–∏—Ä–∞ –≤ –æ—Ä–≥–∞–Ω–∏–∑–º–µ.
        
        Args:
            sex: –ü–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            height: –†–æ—Å—Ç –≤ —Å–º
            waist: –û–±—Ö–≤–∞—Ç —Ç–∞–ª–∏–∏ –≤ —Å–º
            neck: –û–±—Ö–≤–∞—Ç —à–µ–∏ –≤ —Å–º
            hips: –û–±—Ö–≤–∞—Ç –±–µ–¥–µ—Ä –≤ —Å–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∂–µ–Ω—â–∏–Ω)
            
        Returns:
            float: –ü—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞
            
        Raises:
            ValidationError: –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
        """
        try:
            constants = self.BODYFAT_CONSTANTS["female" if sex == "–∂–µ–Ω—Å–∫–∏–π" else "male"]
            
            if sex == "–º—É–∂—Å–∫–æ–π":
                bodyfat = constants["a"] / (constants["b"] - constants["c"] * log10(waist - neck) + constants["d"] * log10(height)) - 450
            else:
                if not hips:
                    raise ValidationError("–î–ª—è –∂–µ–Ω—â–∏–Ω –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –æ–±—Ö–≤–∞—Ç –±—ë–¥–µ—Ä")
                bodyfat = constants["a"] / (constants["b"] - constants["c"] * log10(waist + hips - neck) + constants["d"] * log10(height)) - 450
            
            return round(max(bodyfat, 0), 2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∂–∏—Ä–∞: {str(e)}")
            raise ValidationError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∂–∏—Ä–∞: {str(e)}")

    @BaseHandler.handle_errors
    async def calculate_body_fat(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–†–∞—Å—á–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∂–∏—Ä–∞"""
        data = self.get_user_data(context, "bodyfat", {})
        sex = data["sex"]
        height = data["height"]
        waist = data["waist"]
        neck = data["neck"]
        hips = data.get("hips")

        bodyfat = self.calculate_body_fat_percentage(sex, height, waist, neck, hips)

        user = await self.get_user(update.effective_user.id)
        record = await self.get_or_create_today_record(user.id)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏—è
        record.body_fat = bodyfat
        record.waist = waist
        record.neck = neck
        if hips is not None:
            record.hip = hips

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ö–ë–ñ–£
        from app.modules.kbju import KBJUHandler
        kbju_handler = KBJUHandler()
        await kbju_handler.calculate_kbju(update, context, user, record)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        from app.modules.my_data import MyDataHandler
        my_data_handler = MyDataHandler()
        await my_data_handler.show_user_summary(update, context, skip_kbju=True)

        from app.modules.goals import GoalsHandler
        goals_handler = GoalsHandler()
        await goals_handler.show_goal_analysis(update, context, user, record)
        await goals_handler.show_goal_kbju(update, context, user, record)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
        from app.modules.invite import InviteHandler
        invite_handler = InviteHandler()
        await invite_handler.send_consultation_invite(update, context)

        return ConversationHandler.END

def get_bodyfat_handler() -> ConversationHandler:
    """Get the body fat conversation handler."""
    handler = BodyFatHandler()
    return handler.handler
