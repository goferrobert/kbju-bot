from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ContextTypes, ConversationHandler, CommandHandler, MessageHandler,
    CallbackQueryHandler, filters
)
from datetime import datetime

from app.handlers.base import BaseHandler
from app.handlers.fsm_states import UserStates
from app.db.models import User, UserRecord
from app.utils.validation import ValidationError
from app.utils.logging import get_logger

logger = get_logger(__name__)

class FirstTouchHandler(BaseHandler):
    """Handler for first user interaction."""

    STEP_LEVELS = {
        "low": "–ú–µ–Ω–µ–µ 5000 —à–∞–≥–æ–≤",
        "medium": "5000-10000 —à–∞–≥–æ–≤",
        "high": "–ë–æ–ª–µ–µ 10000 —à–∞–≥–æ–≤"
    }

    SPORT_TYPES = {
        "yoga": ("–ô–æ–≥–∞ / –ü–∏–ª–∞—Ç–µ—Å", 1.05),
        "cardio": ("–ë–µ–≥ / –ö–∞—Ä–¥–∏–æ", 1.10),
        "fitness": ("–§–∏—Ç–Ω–µ—Å / –ó–∞–ª", 1.20),
        "hiit": ("–ö—Ä–æ—Å—Å—Ñ–∏—Ç / HIIT", 1.30)
    }

    def __init__(self):
        super().__init__()
        self.handler = ConversationHandler(
            entry_points=[CommandHandler("start", self.start_first_touch)],
            states={
                UserStates.WAITING_FOR_NAME: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_name)
                ],
                UserStates.WAITING_FOR_BIRTHDAY: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_birthday)
                ],
                UserStates.WAITING_FOR_HEIGHT: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_height)
                ],
                UserStates.WAITING_FOR_SEX: [
                    CallbackQueryHandler(self.handle_sex, pattern="^sex_")
                ],
                UserStates.WAITING_FOR_WEIGHT: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_weight)
                ],
                UserStates.WAITING_FOR_STEPS: [
                    CallbackQueryHandler(self.handle_steps, pattern="^steps_")
                ],
                UserStates.WAITING_FOR_SPORT_YN: [
                    CallbackQueryHandler(self.handle_sport_yn, pattern="^sport_")
                ],
                UserStates.WAITING_FOR_SPORT_TYPE: [
                    CallbackQueryHandler(self.handle_sport_type, pattern="^sport_")
                ],
                UserStates.WAITING_FOR_SPORT_FREQ: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_sport_freq)
                ],
                UserStates.WAITING_FOR_WAIST: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_waist)
                ],
                UserStates.WAITING_FOR_GOAL: [
                    CallbackQueryHandler(self.handle_goal, pattern="^goal_")
                ]
            },
            fallbacks=[]
        )

    @BaseHandler.handle_errors
    async def start_first_touch(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Start first interaction with user."""
        user = await self.get_user(update.effective_user.id)
        if user:
            await self.send_message(update, "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
            from app.ui.menu import send_main_menu
            await send_main_menu(update, context)
            return ConversationHandler.END

        if not update.effective_user.username:
            await self.send_message(
                update,
                "‚ùå –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å username –≤ Telegram."
            )
            return ConversationHandler.END

        await self.send_message(
            update,
            "üëã <b>–ü—Ä–∏–≤–µ—Ç!</b> –°–µ–π—á–∞—Å –º—ã –ø—Ä–æ–π–¥—ë–º –∞–Ω–∫–µ—Ç—É. –≠—Ç–æ –∑–∞–π–º—ë—Ç –Ω–µ –±–æ–ª—å—à–µ 1 –º–∏–Ω—É—Ç—ã!",
            parse_mode="HTML"
        )
        await self.send_message(
            update,
            "üëã –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ.\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? (–§–ò–û –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∏–º—è)",
            parse_mode="HTML"
        )
        return UserStates.WAITING_FOR_NAME

    @BaseHandler.handle_errors
    async def handle_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Handle name input."""
        try:
            name = update.message.text.strip()
            if not name or len(name) < 2:
                raise ValidationError("–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞")

            self.set_user_data(context, "name", name)
            await self.send_message(
                update,
                "üìÖ –í–≤–µ–¥–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–¥–¥.–º–º.–≥–≥–≥–≥):"
            )
            return UserStates.WAITING_FOR_BIRTHDAY
        except ValidationError as e:
            await self.send_message(update, f"‚ùå {str(e)}")
            return UserStates.WAITING_FOR_NAME

    @BaseHandler.handle_errors
    async def handle_birthday(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Handle birthday input."""
        try:
            birthday = datetime.strptime(update.message.text.strip(), "%d.%m.%Y").date()
            if birthday > datetime.now().date():
                raise ValidationError("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º")

            self.set_user_data(context, "birthday", birthday)
            await self.send_message(
                update,
                "üìè –í–≤–µ–¥–∏ —Å–≤–æ–π —Ä–æ—Å—Ç (–≤ —Å–º):"
            )
            return UserStates.WAITING_FOR_HEIGHT
        except ValueError:
            await self.send_message(
                update,
                "‚ùå –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥"
            )
            return UserStates.WAITING_FOR_BIRTHDAY
        except ValidationError as e:
            await self.send_message(update, f"‚ùå {str(e)}")
            return UserStates.WAITING_FOR_BIRTHDAY

    @BaseHandler.handle_errors
    async def handle_height(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Handle height input."""
        try:
            height = float(update.message.text.strip())
            if not 100 <= height <= 250:
                raise ValidationError("–†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 100 –¥–æ 250 —Å–º")

            self.set_user_data(context, "height", height)
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("–ú—É–∂—Å–∫–æ–π", callback_data="sex_male")],
                [InlineKeyboardButton("–ñ–µ–Ω—Å–∫–∏–π", callback_data="sex_female")]
            ])
            await self.send_message(
                update,
                "üë§ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:",
                reply_markup=keyboard
            )
            return UserStates.WAITING_FOR_SEX
        except ValueError:
            await self.send_message(
                update,
                "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ"
            )
            return UserStates.WAITING_FOR_HEIGHT
        except ValidationError as e:
            await self.send_message(update, f"‚ùå {str(e)}")
            return UserStates.WAITING_FOR_HEIGHT

    @BaseHandler.handle_errors
    async def handle_sex(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Handle sex selection."""
        query = update.callback_query
        await query.answer()

        sex = query.data.split("_")[1]
        self.set_user_data(context, "sex", sex)

        await self.send_message(
            update,
            "‚öñÔ∏è –í–≤–µ–¥–∏ —Å–≤–æ–π –≤–µ—Å –≤ –∫–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 72.5):"
        )
        return UserStates.WAITING_FOR_WEIGHT

    @BaseHandler.handle_errors
    async def handle_weight(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Handle weight input."""
        try:
            weight = float(update.message.text.strip())
            if not 30 <= weight <= 300:
                raise ValidationError("–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 30 –¥–æ 300 –∫–≥")

            self.set_user_data(context, "weight", weight)

            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton(level, callback_data=f"steps_{level_id}")]
                for level_id, level in self.STEP_LEVELS.items()
            ])
            await self.send_message(
                update,
                "üìç –°–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ –≤—ã –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ –≤ –¥–µ–Ω—å?",
                reply_markup=keyboard
            )
            return UserStates.WAITING_FOR_STEPS
        except ValueError:
            await self.send_message(
                update,
                "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ"
            )
            return UserStates.WAITING_FOR_WEIGHT
        except ValidationError as e:
            await self.send_message(update, f"‚ùå {str(e)}")
            return UserStates.WAITING_FOR_WEIGHT

    @BaseHandler.handle_errors
    async def handle_steps(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Handle steps selection."""
        query = update.callback_query
        await query.answer()

        step_level = query.data.split("_")[1]
        self.set_user_data(context, "step_level", step_level)

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –î–∞", callback_data="sport_yes")],
            [InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="sport_no")]
        ])
        await self.send_message(
            update,
            "üèãÔ∏è –ó–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å –ª–∏ –≤—ã —Å–ø–æ—Ä—Ç–æ–º?",
            reply_markup=keyboard
        )
        return UserStates.WAITING_FOR_SPORT_YN

    @BaseHandler.handle_errors
    async def handle_sport_yn(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Handle sport yes/no selection."""
        query = update.callback_query
        await query.answer()

        if query.data == "sport_no":
            self.set_user_data(context, "sport_type", "none")
            self.set_user_data(context, "sport_freq", 0)
            return await self.ask_waist(update, context)

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(desc, callback_data=f"sport_{type_}")]
            for type_, (desc, _) in self.SPORT_TYPES.items()
        ])
        await self.send_message(
            update,
            "üí™ –ö–∞–∫–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤—ã –≤—ã–ø–æ–ª–Ω—è–µ—Ç–µ?",
            reply_markup=keyboard
        )
        return UserStates.WAITING_FOR_SPORT_TYPE

    @BaseHandler.handle_errors
    async def handle_sport_type(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Handle sport type selection."""
        query = update.callback_query
        await query.answer()

        sport_type = query.data.split("_")[1]
        self.set_user_data(context, "sport_type", sport_type)
        self.set_user_data(context, "sport_multiplier", self.SPORT_TYPES[sport_type][1])

        await self.send_message(
            update,
            "üìÖ –°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –≤—ã —Ç—Ä–µ–Ω–∏—Ä—É–µ—Ç–µ—Å—å? (1-7)"
        )
        return UserStates.WAITING_FOR_SPORT_FREQ

    @BaseHandler.handle_errors
    async def handle_sport_freq(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Handle sport frequency input."""
        try:
            freq = int(update.message.text.strip())
            if not 1 <= freq <= 7:
                raise ValidationError("–ß–∞—Å—Ç–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 7 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é")

            self.set_user_data(context, "sport_freq", freq)
            return await self.ask_waist(update, context)
        except ValueError:
            await self.send_message(
                update,
                "‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ"
            )
            return UserStates.WAITING_FOR_SPORT_FREQ
        except ValidationError as e:
            await self.send_message(update, f"‚ùå {str(e)}")
            return UserStates.WAITING_FOR_SPORT_FREQ

    @BaseHandler.handle_errors
    async def ask_waist(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Ask for waist measurement."""
        await self.send_message(
            update,
            "üìè –í–≤–µ–¥–∏ –æ–±—Ö–≤–∞—Ç —Ç–∞–ª–∏–∏ (–≤ —Å–º):"
        )
        return UserStates.WAITING_FOR_WAIST

    @BaseHandler.handle_errors
    async def handle_waist(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Handle waist measurement input."""
        try:
            waist = float(update.message.text.strip())
            if not 50 <= waist <= 200:
                raise ValidationError("–û–±—Ö–≤–∞—Ç —Ç–∞–ª–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 50 –¥–æ 200 —Å–º")

            self.set_user_data(context, "waist", waist)

            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ç–µ–ª–æ", callback_data="goal_normal")],
                [InlineKeyboardButton("–°–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ —Ç–µ–ª–æ", callback_data="goal_athletic")],
                [InlineKeyboardButton("–°—É—Ö–æ–µ —Ç–µ–ª–æ", callback_data="goal_lean")]
            ])
            await self.send_message(
                update,
                "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:",
                reply_markup=keyboard
            )
            return UserStates.WAITING_FOR_GOAL
        except ValueError:
            await self.send_message(
                update,
                "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ"
            )
            return UserStates.WAITING_FOR_WAIST
        except ValidationError as e:
            await self.send_message(update, f"‚ùå {str(e)}")
            return UserStates.WAITING_FOR_WAIST

    @BaseHandler.handle_errors
    async def handle_goal(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """Handle goal selection and finalize registration."""
        query = update.callback_query
        await query.answer()

        goal = query.data.split("_")[1]
        goal_map = {
            "normal": "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ç–µ–ª–æ",
            "athletic": "–°–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ —Ç–µ–ª–æ",
            "lean": "–°—É—Ö–æ–µ —Ç–µ–ª–æ"
        }
        self.set_user_data(context, "goal", goal_map[goal])

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User(
            telegram_id=update.effective_user.id,
            username=update.effective_user.username,
            name=self.get_user_data(context, "name"),
            sex=self.get_user_data(context, "sex"),
            date_of_birth=self.get_user_data(context, "birthday"),
            height=self.get_user_data(context, "height"),
            goal=self.get_user_data(context, "goal")
        )
        self.session.add(user)
        await self.session.commit()

        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å
        record = UserRecord(
            user_id=user.id,
            weight=self.get_user_data(context, "weight"),
            waist=self.get_user_data(context, "waist"),
            step_level=self.get_user_data(context, "step_level"),
            sport_type=self.get_user_data(context, "sport_type"),
            sport_freq=self.get_user_data(context, "sport_freq")
        )
        self.session.add(record)
        await self.session.commit()

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ö–ë–ñ–£
        from app.modules.kbju import KBJUHandler
        kbju_handler = KBJUHandler()
        await kbju_handler.calculate_kbju(update, context, user, record)

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞
        from app.modules.bodyfat import BodyFatHandler
        bodyfat_handler = BodyFatHandler()
        await bodyfat_handler.calculate_bodyfat(update, context, user, record)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
        from app.modules.my_data import MyDataHandler
        my_data_handler = MyDataHandler()
        await my_data_handler.show_user_summary(update, context)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
        from app.modules.invite import InviteHandler
        invite_handler = InviteHandler()
        await invite_handler.send_consultation_invite(update, context)

        return ConversationHandler.END

def get_first_touch_handler() -> ConversationHandler:
    """Get the first touch conversation handler."""
    handler = FirstTouchHandler()
    return handler.handler