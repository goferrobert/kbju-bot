from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from datetime import date, datetime

from app.handlers.base import BaseHandler
from app.handlers.fsm_states import UserStates
from app.db.models import User, UserRecord
from app.utils.validation import ValidationError
from app.utils.logging import get_logger
from app.utils.calculations import calculate_kbju

logger = get_logger(__name__)

class GoalsHandler(BaseHandler):
    """Handler for user goals and analysis."""

    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ü–µ–ª–µ–π
    GOALS = {
        "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ç–µ–ª–æ": {
            "male": {"min": 0, "max": 25},
            "female": {"min": 0, "max": 32},
            "description": "–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∂–∏—Ä–∞",
            "recommendations": [
                "–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ",
                "–†–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
                "–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞"
            ],
            "nutrition": [
                "–°–æ–∑–¥–∞–π—Ç–µ –¥–µ—Ñ–∏—Ü–∏—Ç –∫–∞–ª–æ—Ä–∏–π",
                "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –±–∞–ª–∞–Ω—Å–æ–º –ë–ñ–£",
                "–ü–µ–π—Ç–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–æ–¥—ã"
            ]
        },
        "–°–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ —Ç–µ–ª–æ": {
            "male": {"min": 15, "max": 25},
            "female": {"min": 21, "max": 32},
            "description": "–†–∞–∑–≤–∏—Ç–∏–µ –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã",
            "recommendations": [
                "–ü–æ–≤—ã—à–µ–Ω–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –±–µ–ª–∫–∞",
                "–°–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
                "–î–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –æ—Ç–¥—ã—Ö"
            ],
            "nutrition": [
                "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –∫–∞–ª–æ—Ä–∏–∏",
                "–£–≤–µ–ª–∏—á—å—Ç–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –±–µ–ª–∫–∞",
                "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ–º –ø–∏—â–∏"
            ]
        },
        "–°—É—Ö–æ–µ —Ç–µ–ª–æ": {
            "male": {"min": 0, "max": 15},
            "female": {"min": 0, "max": 21},
            "description": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ä–µ–ª—å–µ—Ñ–Ω–æ—Å—Ç—å",
            "recommendations": [
                "–°—Ç—Ä–æ–≥–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å –ø–∏—Ç–∞–Ω–∏—è",
                "–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
                "–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞–º–µ—Ä—ã"
            ],
            "nutrition": [
                "–°–æ–∑–¥–∞–π—Ç–µ –Ω–µ–±–æ–ª—å—à–æ–π –¥–µ—Ñ–∏—Ü–∏—Ç",
                "–£–≤–µ–ª–∏—á—å—Ç–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –±–µ–ª–∫–∞",
                "–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ —É–≥–ª–µ–≤–æ–¥—ã"
            ]
        }
    }

    def __init__(self):
        super().__init__()

    def calculate_age(self, birth_date: datetime) -> int:
        """
        –†–∞—Å—á–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            birth_date: –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
            
        Returns:
            int: –í–æ–∑—Ä–∞—Å—Ç –≤ –≥–æ–¥–∞—Ö
        """
        today = datetime.now()
        age = today.year - birth_date.year
        if today.month < birth_date.month or (today.month == birth_date.month and today.day < birth_date.day):
            age -= 1
        return age

    def determine_goal(self, sex: str, body_fat: float) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª–∞ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∂–∏—Ä–∞.
        
        Args:
            sex: –ü–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            body_fat: –ü—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞
            
        Returns:
            str: –ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏
        """
        sex_key = "female" if sex.lower() == "–∂–µ–Ω—Å–∫–∏–π" else "male"
        
        for goal, data in self.GOALS.items():
            if data[sex_key]["min"] <= body_fat <= data[sex_key]["max"]:
                return goal
                
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ø–∞–ª–∏ –Ω–∏ –≤ –æ–¥–∏–Ω –¥–∏–∞–ø–∞–∑–æ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–ª–∏–∂–∞–π—à—É—é —Ü–µ–ª—å
        if sex_key == "male":
            return "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ç–µ–ª–æ" if body_fat > 25 else "–°—É—Ö–æ–µ —Ç–µ–ª–æ"
        else:
            return "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ç–µ–ª–æ" if body_fat > 32 else "–°—É—Ö–æ–µ —Ç–µ–ª–æ"

    @BaseHandler.handle_errors
    async def show_goal_analysis(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user: User = None, record: UserRecord = None) -> int:
        """
        –ü–æ–∫–∞–∑ –∞–Ω–∞–ª–∏–∑–∞ —Ü–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∂–∏—Ä–∞.
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            record: –ó–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        """
        if not user:
            user = await self.get_user(update.effective_user.id)
        if not user:
            raise ValidationError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

        if not record:
            record = await self.get_latest_record(user.id)
        if not record or not record.body_fat:
            await self.send_message(
                update,
                "–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ü–µ–ª–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–∏—Ç—å –≤–∞—à–∏ –º–µ—Ç—Ä–∏–∫–∏."
            )
            return ConversationHandler.END

        body_fat = record.body_fat
        goal = self.determine_goal(user.sex, body_fat)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ª—å
        user.goal = goal
        await self.session.commit()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        goal_data = self.GOALS[goal]
        message = (
            f"üìä <b>–ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è:</b>\n\n"
            f"–ü—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞: <b>{body_fat:.1f}%</b>\n"
            f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Ü–µ–ª—å: <b>{goal}</b>\n\n"
            f"üéØ <b>–í–∞—à–∞ —Ü–µ–ª—å:</b> {goal_data['description']}\n"
            f"üìù <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
        )
        message += "\n".join(f"‚Ä¢ {rec}" for rec in goal_data["recommendations"])

        keyboard = [[InlineKeyboardButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ö–ë–ñ–£", callback_data="calculate_kbju")]]
        await self.send_message(
            update,
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="HTML"
        )
        return UserStates.WAITING_FOR_GOAL

    @BaseHandler.handle_errors
    async def show_goal_kbju(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user: User = None, record: UserRecord = None) -> int:
        """
        –ü–æ–∫–∞–∑ —Ä–∞—Å—á–µ—Ç–∞ –ö–ë–ñ–£ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            record: –ó–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        """
        query = update.callback_query
        await query.answer()

        if not user:
            user = await self.get_user(update.effective_user.id)
        if not user:
            raise ValidationError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

        if not record:
            record = await self.get_latest_record(user.id)
        if not record:
            await self.send_message(
                update,
                "–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ö–ë–ñ–£ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–∏—Ç—å –≤–∞—à–∏ –º–µ—Ç—Ä–∏–∫–∏."
            )
            return ConversationHandler.END

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ö–ë–ñ–£
        kbju = calculate_kbju(
            weight=record.weight,
            height=user.height,
            age=self.calculate_age(user.date_of_birth),
            sex=user.sex,
            activity_level=record.activity_level,
            goal=user.goal
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ö–ë–ñ–£
        record.calories = kbju["calories"]
        record.protein = kbju["protein"]
        record.fat = kbju["fat"]
        record.carbs = kbju["carbs"]
        await self.session.commit()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        goal_data = self.GOALS[user.goal]
        message = (
            f"üçΩ <b>–í–∞—à–µ –ö–ë–ñ–£ –¥–ª—è —Ü–µ–ª–∏ '{user.goal}':</b>\n\n"
            f"–ö–∞–ª–æ—Ä–∏–∏: <b>{kbju['calories']}</b> –∫–∫–∞–ª\n"
            f"–ë–µ–ª–∫–∏: <b>{kbju['protein']}</b> –≥\n"
            f"–ñ–∏—Ä—ã: <b>{kbju['fat']}</b> –≥\n"
            f"–£–≥–ª–µ–≤–æ–¥—ã: <b>{kbju['carbs']}</b> –≥\n\n"
            f"üìù <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é:</b>\n"
        )
        message += "\n".join(f"‚Ä¢ {rec}" for rec in goal_data["nutrition"])

        await self.send_message(
            update,
            message,
            parse_mode="HTML"
        )
        return ConversationHandler.END

def get_goals_handler() -> ConversationHandler:
    """Get the goals conversation handler."""
    handler = GoalsHandler()
    return ConversationHandler(
        entry_points=[handler.show_goal_analysis],
        states={
            UserStates.WAITING_FOR_GOAL: [
                handler.show_goal_kbju
            ]
        },
        fallbacks=[]
    )

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
goals_handler = GoalsHandler()
