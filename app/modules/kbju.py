from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, ConversationHandler, CallbackQueryHandler
from app.handlers.base import BaseHandler
from app.handlers.fsm_states import UserStates
from app.db.models import User, UserRecord
from app.utils.validation import ValidationError
from app.utils.logging import get_logger

logger = get_logger(__name__)

class KBJUHandler(BaseHandler):
    """Handler for KBJU calculations."""

    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
    CALORIE_MULTIPLIERS = {
        "fat_loss": 0.85,
        "mass_gain": 1.10,
        "recomposition": 0.95
    }

    PROTEIN_PER_KG = 2.0
    FAT_PER_KG = 1.0
    CALORIES_PER_GRAM = {
        "protein": 4,
        "fat": 9,
        "carbs": 4
    }

    def __init__(self):
        super().__init__()
        self.handler = ConversationHandler(
            entry_points=[],  # –ü–æ–¥–∫–ª—é—á–∏ –≤ main: CommandHandler("kbju", self.handle_kbju_command)
            states={
                UserStates.WAITING_FOR_GOAL: [
                    CallbackQueryHandler(self.handle_kbju_goal, pattern="^goal_")
                ],
            },
            fallbacks=[]
        )

    @BaseHandler.handle_errors
    async def calculate_kbju(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user: User, record: UserRecord) -> dict:
        """
        –†–∞—Å—á–µ—Ç –ö–ë–ñ–£ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            record: –ó–∞–ø–∏—Å—å —Å —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            
        Returns:
            dict: –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ö–ë–ñ–£
        """
        try:
            weight = record.weight
            height = user.height
            age = (record.created_at.year - user.date_of_birth.year)
            sex = user.sex
            activity = record.activity_level or 1.3

            if not all([weight, height, age, sex]):
                raise ValidationError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ö–ë–ñ–£")

            # –†–∞—Å—á–µ—Ç –±–∞–∑–æ–≤–æ–≥–æ –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞
            if sex == "–º—É–∂—Å–∫–æ–π":
                bmr = 10 * weight + 6.25 * height - 5 * age + 5
            else:
                bmr = 10 * weight + 6.25 * height - 5 * age - 161

            calories = bmr * activity

            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ü–µ–ª–∏
            goal = user.goal
            if goal and goal in self.CALORIE_MULTIPLIERS:
                calories *= self.CALORIE_MULTIPLIERS[goal]

            # –†–∞—Å—á–µ—Ç –±–µ–ª–∫–æ–≤ –∏ –∂–∏—Ä–æ–≤
            protein = self.PROTEIN_PER_KG * weight
            fat = self.FAT_PER_KG * weight

            # –†–∞—Å—á–µ—Ç —É–≥–ª–µ–≤–æ–¥–æ–≤
            kcal_from_protein = protein * self.CALORIES_PER_GRAM["protein"]
            kcal_from_fat = fat * self.CALORIES_PER_GRAM["fat"]
            remaining_kcal = calories - (kcal_from_protein + kcal_from_fat)
            carbs = max(0, remaining_kcal / self.CALORIES_PER_GRAM["carbs"])

            kbju = {
                "calories": round(calories),
                "protein": round(protein),
                "fat": round(fat),
                "carbs": round(carbs)
            }

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∑–∞–ø–∏—Å—å
            record.calories = kbju["calories"]
            record.protein = kbju["protein"]
            record.fat = kbju["fat"]
            record.carbs = kbju["carbs"]
            await self.session.commit()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            await self.send_message(
                update,
                f"<b>üìå –ö–ë–ñ–£ –¥–ª—è —Ü–µ–ª–∏ '{goal.replace('_', ' ')}':</b>\n"
                f"üî• –ö–∞–ª–æ—Ä–∏–∏: <b>{kbju['calories']}</b>\n"
                f"ü•© –ë–µ–ª–∫–∏: <b>{kbju['protein']} –≥</b>\n"
                f"üßà –ñ–∏—Ä—ã: <b>{kbju['fat']} –≥</b>\n"
                f"üçû –£–≥–ª–µ–≤–æ–¥—ã: <b>{kbju['carbs']} –≥</b>",
                parse_mode="HTML"
            )

            return kbju

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –ö–ë–ñ–£: {str(e)}")
            raise ValidationError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –ö–ë–ñ–£: {str(e)}")

    @BaseHandler.handle_errors
    async def handle_kbju_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /kbju"""
        user = await self.get_user(update.effective_user.id)
        if not user:
            await self.send_message(
                update,
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
            )
            return ConversationHandler.END

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üî• –°–Ω–∏–∂–µ–Ω–∏–µ –∂–∏—Ä–∞", callback_data="goal_fat_loss")],
            [InlineKeyboardButton("üìà –ù–∞–±–æ—Ä –º–∞—Å—Å—ã", callback_data="goal_mass_gain")],
            [InlineKeyboardButton("‚öñÔ∏è –†–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è", callback_data="goal_recomposition")]
        ])
        await self.send_message(
            update,
            "üéØ <b>–í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ü–µ–ª—å:</b>",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        return UserStates.WAITING_FOR_GOAL

    @BaseHandler.handle_errors
    async def handle_kbju_goal(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏ –¥–ª—è –ö–ë–ñ–£"""
        query = update.callback_query
        await query.answer()

        goal = query.data.replace("goal_", "")
        if goal not in self.CALORIE_MULTIPLIERS:
            raise ValidationError("–ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–ª—å")

        user = await self.get_user(update.effective_user.id)
        if not user:
            raise ValidationError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

        record = await self.get_or_create_today_record(user.id)
        await self.calculate_kbju(update, context, user, record)

        return ConversationHandler.END

def get_kbju_handler() -> ConversationHandler:
    """Get the KBJU conversation handler."""
    handler = KBJUHandler()
    return handler.handler
