from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, ConversationHandler, CallbackQueryHandler
from app.db.crud import get_user_by_telegram_id
from app.db.record_utils import get_or_create_today_record
from app.db.session import SessionLocal

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏
GOAL_SELECT = 913


def calculate_kbju(user, record, goal: str = None):
    weight = record.weight
    height = user.height
    age = (record.created_at.year - user.date_of_birth.year)
    sex = user.sex
    activity = record.activity_level or 1.3

    if sex == "–º—É–∂—Å–∫–æ–π":
        bmr = 10 * weight + 6.25 * height - 5 * age + 5
    else:
        bmr = 10 * weight + 6.25 * height - 5 * age - 161

    calories = bmr * activity

    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ü–µ–ª–∏
    if goal == "fat_loss":
        calories *= 0.85
    elif goal == "mass_gain":
        calories *= 1.10
    elif goal == "recomposition":
        calories *= 0.95

    protein = 2.0 * weight
    fat = 1.0 * weight

    kcal_from_protein = protein * 4
    kcal_from_fat = fat * 9
    remaining_kcal = calories - (kcal_from_protein + kcal_from_fat)
    carbs = max(0, remaining_kcal / 4)

    return {
        "calories": round(calories),
        "protein": round(protein),
        "fat": round(fat),
        "carbs": round(carbs)
    }


async def handle_kbju_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üî• –°–Ω–∏–∂–µ–Ω–∏–µ –∂–∏—Ä–∞", callback_data="goal_fat_loss")],
        [InlineKeyboardButton("üìà –ù–∞–±–æ—Ä –º–∞—Å—Å—ã", callback_data="goal_mass_gain")],
        [InlineKeyboardButton("‚öñÔ∏è –†–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è", callback_data="goal_recomposition")]
    ])
    await update.message.reply_text("üéØ <b>–í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ü–µ–ª—å:</b>", reply_markup=keyboard, parse_mode="HTML")
    return GOAL_SELECT


async def handle_kbju_goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    goal = update.callback_query.data.replace("goal_", "")

    telegram_id = update.effective_user.id
    user = get_user_by_telegram_id(telegram_id)
    db = SessionLocal()
    record = get_or_create_today_record(user.id, db)

    kbju = calculate_kbju(user, record, goal)
    record.calories = kbju["calories"]
    record.protein = kbju["protein"]
    record.fat = kbju["fat"]
    record.carbs = kbju["carbs"]
    record.goal_type = goal

    db.commit()
    db.close()

    await update.callback_query.message.reply_text(
        f"<b>üìå –ö–ë–ñ–£ –¥–ª—è —Ü–µ–ª–∏ '{goal.replace('_', ' ')}':</b>\n"
        f"üî• –ö–∞–ª–æ—Ä–∏–∏: <b>{kbju['calories']}</b>\n"
        f"ü•© –ë–µ–ª–∫–∏: <b>{kbju['protein']} –≥</b>\n"
        f"üßà –ñ–∏—Ä—ã: <b>{kbju['fat']} –≥</b>\n"
        f"üçû –£–≥–ª–µ–≤–æ–¥—ã: <b>{kbju['carbs']} –≥</b>",
        parse_mode="HTML"
    )
    return ConversationHandler.END


kbju_handler = ConversationHandler(
    entry_points=[],  # –ü–æ–¥–∫–ª—é—á–∏ –≤ main: CommandHandler("kbju", handle_kbju_command)
    states={
        GOAL_SELECT: [CallbackQueryHandler(handle_kbju_goal, pattern="^goal_")],
    },
    fallbacks=[]
)
