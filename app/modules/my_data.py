from telegram import Update
from telegram.ext import ContextTypes
from datetime import date

from app.handlers.base import BaseHandler
from app.db.models import User, UserRecord
from app.utils.validation import ValidationError
from app.utils.logging import get_logger

logger = get_logger(__name__)

class MyDataHandler(BaseHandler):
    """Handler for user data display."""

    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    DATA_FORMAT = {
        "name": "üë§ –ò–º—è: <b>{value}</b>",
        "age": "üéÇ –í–æ–∑—Ä–∞—Å—Ç: <b>{value}</b>",
        "height": "üìè –†–æ—Å—Ç: <b>{value} —Å–º</b>",
        "weight": "‚öñÔ∏è –í–µ—Å: <b>{value} –∫–≥</b>",
        "waist": "üìâ –¢–∞–ª–∏—è: <b>{value} —Å–º</b>",
        "neck": "üìè –®–µ—è: <b>{value} —Å–º</b>",
        "hip": "ü¶µ –ë—ë–¥—Ä–∞: <b>{value} —Å–º</b>",
        "body_fat": "üí™ –ñ–∏—Ä: <b>{value}%</b>",
        "step_level": "üö∂ –®–∞–≥–∏: <b>–£—Ä–æ–≤–µ–Ω—å {value}</b>",
        "sport": "üí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: <b>{value}</b>",
        "kbju": {
            "title": "\n<b>üçΩ –¢–≤–æ—è –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞:</b>",
            "calories": "üî• –ö–∞–ª–æ—Ä–∏–∏: <b>{value}</b>",
            "protein": "ü•© –ë–µ–ª–∫–∏: <b>{value} –≥</b>",
            "fat": "üßà –ñ–∏—Ä—ã: <b>{value} –≥</b>",
            "carbs": "üçû –£–≥–ª–µ–≤–æ–¥—ã: <b>{value} –≥</b>"
        }
    }

    def calculate_age(self, birth_date: date) -> int:
        """
        –†–∞—Å—á–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            birth_date: –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
            
        Returns:
            int: –í–æ–∑—Ä–∞—Å—Ç –≤ –≥–æ–¥–∞—Ö
        """
        today = date.today()
        return today.year - birth_date.year - ((today.month, today.day) < (birth_date.month, birth_date.day))

    def format_sport_info(self, sport_type: str, sport_freq: str) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö.
        
        Args:
            sport_type: –¢–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
            sport_freq: –ß–∞—Å—Ç–æ—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        """
        if not sport_type or sport_type == "–Ω–µ—Ç":
            return None
        return f"{sport_type.replace('sport_', '').capitalize()} ‚Äî {sport_freq} —Ä/–Ω–µ–¥"

    @BaseHandler.handle_errors
    async def show_user_summary(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user: User = None, record: UserRecord = None, skip_kbju: bool = False) -> None:
        """
        –ü–æ–∫–∞–∑ —Å–≤–æ–¥–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            record: –ó–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            skip_kbju: –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ö–ë–ñ–£
        """
        if not user:
            user = await self.get_user(update.effective_user.id)
        if not user:
            raise ValidationError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

        if not record:
            record = await self.get_latest_record(user.id)
        if not record:
            raise ValidationError("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–ø–∏—Å—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        lines = ["<b>üìÅ –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ:</b>"]

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        lines.append(self.DATA_FORMAT["name"].format(value=user.name or user.first_name))
        
        age = self.calculate_age(user.date_of_birth) if user.date_of_birth else "‚Äî"
        lines.append(self.DATA_FORMAT["age"].format(value=age))
        
        if user.height:
            lines.append(self.DATA_FORMAT["height"].format(value=user.height))
        
        if record.weight:
            lines.append(self.DATA_FORMAT["weight"].format(value=record.weight))

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏—è
        if record.waist:
            lines.append(self.DATA_FORMAT["waist"].format(value=record.waist))
        if record.neck:
            lines.append(self.DATA_FORMAT["neck"].format(value=record.neck))
        if record.hip:
            lines.append(self.DATA_FORMAT["hip"].format(value=record.hip))
        if record.body_fat:
            lines.append(self.DATA_FORMAT["body_fat"].format(value=record.body_fat))

        # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        if record.step_level:
            lines.append(self.DATA_FORMAT["step_level"].format(value=record.step_level))
        
        sport_info = self.format_sport_info(record.sport_type, record.sport_freq)
        if sport_info:
            lines.append(self.DATA_FORMAT["sport"].format(value=sport_info))

        # –î–æ–±–∞–≤–ª—è–µ–º –ö–ë–ñ–£
        if not skip_kbju and record.calories and record.protein and record.fat and record.carbs:
            lines.append(self.DATA_FORMAT["kbju"]["title"])
            lines.append(self.DATA_FORMAT["kbju"]["calories"].format(value=record.calories))
            lines.append(self.DATA_FORMAT["kbju"]["protein"].format(value=record.protein))
            lines.append(self.DATA_FORMAT["kbju"]["fat"].format(value=record.fat))
            lines.append(self.DATA_FORMAT["kbju"]["carbs"].format(value=record.carbs))

        await self.send_message(update, "\n".join(lines), parse_mode="HTML")

def get_my_data_handler() -> MyDataHandler:
    """Get the my data handler instance."""
    return MyDataHandler()
