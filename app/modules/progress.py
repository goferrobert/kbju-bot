import matplotlib.pyplot as plt
from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler
import io
from typing import Optional, List, Tuple

from app.handlers.base import BaseHandler
from app.db.models import UserRecord
from app.utils.validation import ValidationError
from app.utils.logger import get_logger

logger = get_logger(__name__)

class ProgressHandler(BaseHandler):
    """Handler for user progress tracking and visualization."""

    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    MESSAGES = {
        "title": "üìä <b>–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ {period}:</b>\n\n",
        "weight": (
            "‚öñÔ∏è <b>–í–µ—Å:</b>\n"
            "‚Ä¢ –ù–∞—á–∞–ª—å–Ω—ã–π: {start:.1f} –∫–≥\n"
            "‚Ä¢ –¢–µ–∫—É—â–∏–π: {current:.1f} –∫–≥\n"
            "‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {change:+.1f} –∫–≥ ({percent:+.1f}%)\n\n"
        ),
        "body_fat": (
            "üìè <b>–ü—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞:</b>\n"
            "‚Ä¢ –ù–∞—á–∞–ª—å–Ω—ã–π: {start:.1f}%\n"
            "‚Ä¢ –¢–µ–∫—É—â–∏–π: {current:.1f}%\n"
            "‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {change:+.1f}% ({percent:+.1f}%)\n\n"
        ),
        "progress": {
            "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ç–µ–ª–æ": {
                "weight_loss": "‚Ä¢ –û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Å–Ω–∏–∂–µ–Ω–∏–∏ –≤–µ—Å–∞!\n",
                "weight_gain": "‚Ä¢ –í–Ω–∏–º–∞–Ω–∏–µ: –Ω–∞–±–ª—é–¥–∞–µ—Ç—Å—è –Ω–∞–±–æ—Ä –≤–µ—Å–∞.\n",
                "stable": "‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω—ã–π –≤–µ—Å, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ.\n"
            },
            "–°–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ —Ç–µ–ª–æ": {
                "muscle_gain": "‚Ä¢ –û—Ç–ª–∏—á–Ω—ã–π –Ω–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã!\n",
                "weight_loss": "‚Ä¢ –í–Ω–∏–º–∞–Ω–∏–µ: –Ω–∞–±–ª—é–¥–∞–µ—Ç—Å—è –ø–æ—Ç–µ—Ä—è –≤–µ—Å–∞.\n",
                "stable": "‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω—ã–π –≤–µ—Å, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.\n"
            },
            "–°—É—Ö–æ–µ —Ç–µ–ª–æ": {
                "fat_loss": "‚Ä¢ –û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Å–Ω–∏–∂–µ–Ω–∏–∏ –∂–∏—Ä–∞!\n",
                "weight_gain": "‚Ä¢ –í–Ω–∏–º–∞–Ω–∏–µ: –Ω–∞–±–ª—é–¥–∞–µ—Ç—Å—è –Ω–∞–±–æ—Ä –≤–µ—Å–∞.\n",
                "stable": "‚Ä¢ –°—Ç–∞–±–∏–ª—å–Ω—ã–π –≤–µ—Å, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ.\n"
            }
        }
    }

    def describe_period(self, days: int) -> str:
        """
        –û–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.
        
        Args:
            days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
            
        Returns:
            str: –û–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞
        """
        if days < 7:
            return f"{days} –¥–Ω–µ–π"
        elif days < 30:
            weeks = days // 7
            return f"{weeks} {'–Ω–µ–¥–µ–ª—é' if weeks == 1 else '–Ω–µ–¥–µ–ª–∏' if 1 < weeks < 5 else '–Ω–µ–¥–µ–ª—å'}"
        else:
            months = days // 30
            return f"{months} {'–º–µ—Å—è—Ü' if months == 1 else '–º–µ—Å—è—Ü–∞' if 1 < months < 5 else '–º–µ—Å—è—Ü–µ–≤'}"

    def smart_progress_message(
        self,
        weight_change: float,
        fat_change: Optional[float],
        goal: str
    ) -> str:
        """
        –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —É–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ.
        
        Args:
            weight_change: –†–∞–∑–Ω–∏—Ü–∞ –≤ –≤–µ—Å–µ
            fat_change: –†–∞–∑–Ω–∏—Ü–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–µ –∂–∏—Ä–∞
            goal: –¶–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            str: –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        """
        message = "üéØ <b>–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:</b>\n"
        progress_messages = self.MESSAGES["progress"][goal]

        if goal == "–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ç–µ–ª–æ":
            if weight_change < -2:
                message += progress_messages["weight_loss"]
            elif weight_change > 2:
                message += progress_messages["weight_gain"]
            else:
                message += progress_messages["stable"]
        elif goal == "–°–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ —Ç–µ–ª–æ":
            if weight_change > 2 and fat_change and fat_change < 1:
                message += progress_messages["muscle_gain"]
            elif weight_change < -2:
                message += progress_messages["weight_loss"]
            else:
                message += progress_messages["stable"]
        else:  # –°—É—Ö–æ–µ —Ç–µ–ª–æ
            if weight_change < -1 and fat_change and fat_change < -1:
                message += progress_messages["fat_loss"]
            elif weight_change > 1:
                message += progress_messages["weight_gain"]
            else:
                message += progress_messages["stable"]

        return message

    def create_progress_graph(self, records: List[UserRecord]) -> Optional[io.BytesIO]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
        
        Args:
            records: –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Optional[io.BytesIO]: –û–±—ä–µ–∫—Ç BytesIO —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º –≥—Ä–∞—Ñ–∏–∫–æ–º –∏–ª–∏ None, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
        """
        if len(records) < 2:
            return None

        plt.figure(figsize=(10, 6))
        dates = [r.created_at for r in records]
        weights = [r.weight for r in records]
        body_fat = [r.body_fat for r in records if r.body_fat]

        # Plot weight
        plt.plot(dates, weights, 'b-', label='–í–µ—Å (–∫–≥)', linewidth=2)
        plt.scatter(dates, weights, color='blue', s=50)

        # Plot body fat if available
        if body_fat:
            fat_dates = [r.created_at for r in records if r.body_fat]
            plt.plot(fat_dates, body_fat, 'r-', label='–ü—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞ (%)', linewidth=2)
            plt.scatter(fat_dates, body_fat, color='red', s=50)

        plt.title('–ü—Ä–æ–≥—Ä–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏–π', fontsize=14)
        plt.xlabel('–î–∞—Ç–∞', fontsize=12)
        plt.ylabel('–ó–Ω–∞—á–µ–Ω–∏–µ', fontsize=12)
        plt.grid(True, linestyle='--', alpha=0.7)
        plt.legend()

        # Format x-axis dates
        plt.gcf().autofmt_xdate()

        # Save plot to bytes
        buf = io.BytesIO()
        plt.savefig(buf, format='png', dpi=300, bbox_inches='tight')
        buf.seek(0)
        plt.close()

        return buf

    def calculate_changes(self, first_record: UserRecord, last_record: UserRecord) -> Tuple[float, float, Optional[float], Optional[float]]:
        """
        –†–∞—Å—á–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –º–µ–∂–¥—É –ø–µ—Ä–≤–æ–π –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å—å—é.
        
        Args:
            first_record: –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å
            last_record: –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å
            
        Returns:
            Tuple[float, float, Optional[float], Optional[float]]: 
                (–∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤–µ—Å–∞, –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Å–∞, –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∂–∏—Ä–∞, –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∂–∏—Ä–∞)
        """
        weight_change = last_record.weight - first_record.weight
        weight_percent = (weight_change / first_record.weight) * 100

        fat_change = None
        fat_percent = None
        if first_record.body_fat and last_record.body_fat:
            fat_change = last_record.body_fat - first_record.body_fat
            fat_percent = (fat_change / first_record.body_fat) * 100

        return weight_change, weight_percent, fat_change, fat_percent

    @BaseHandler.handle_errors
    async def show_progress(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """
        –ü–æ–∫–∞–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
            
        Returns:
            int: –ö–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã
        """
        user = await self.get_user(update.effective_user.id)
        if not user:
            raise ValidationError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

        records = await self.get_all_records(user.id)
        if not records or len(records) < 2:
            raise ValidationError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        first_record = records[0]
        last_record = records[-1]
        days_passed = (last_record.created_at - first_record.created_at).days

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        weight_change, weight_percent, fat_change, fat_percent = self.calculate_changes(first_record, last_record)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        message = self.MESSAGES["title"].format(period=self.describe_period(days_passed))

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Å–µ
        message += self.MESSAGES["weight"].format(
            start=first_record.weight,
            current=last_record.weight,
            change=weight_change,
            percent=weight_percent
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ–Ω—Ç–µ –∂–∏—Ä–∞
        if fat_change is not None:
            message += self.MESSAGES["body_fat"].format(
                start=first_record.body_fat,
                current=last_record.body_fat,
                change=fat_change,
                percent=fat_percent
            )

        # –î–æ–±–∞–≤–ª—è–µ–º —É–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        message += self.smart_progress_message(
            weight_change=weight_change,
            fat_change=fat_change,
            goal=user.goal
        )

        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        graph = self.create_progress_graph(records)
        if graph:
            await self.send_photo(update, graph, caption=message, parse_mode="HTML")
        else:
            await self.send_message(update, message, parse_mode="HTML")

        return ConversationHandler.END

def get_progress_handler() -> ConversationHandler:
    """Get the progress conversation handler."""
    handler = ProgressHandler()
    return ConversationHandler(
        entry_points=[handler.show_progress],
        states={},
        fallbacks=[]
    )
