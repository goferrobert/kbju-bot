import os
import matplotlib.pyplot as plt
from datetime import datetime
from telegram import Update
from telegram.ext import ContextTypes
from sqlalchemy.orm import Session
from sqlalchemy import asc
from app.db.session import get_db
from app.db.crud import get_user_by_telegram_id
from app.db.models import UserRecord

def get_all_records_for_user(user_id: int, db: Session) -> list[UserRecord]:
    return (
        db.query(UserRecord)
        .filter(UserRecord.user_id == user_id)
        .order_by(asc(UserRecord.created_at))
        .all()
    )

def describe_period(days: int) -> str:
    if days < 7:
        return f"–≤—Å–µ–≥–æ –∑–∞ {days} –¥–Ω–µ–π"
    months = days / 30
    if months < 1.5:
        return "–≤—Å–µ–≥–æ –∑–∞ 1 –º–µ—Å—è—Ü"
    elif months < 2.5:
        return "–≤—Å–µ–≥–æ –∑–∞ 1.5 –º–µ—Å—è—Ü–∞"
    elif months < 3.5:
        return "–≤—Å–µ–≥–æ –∑–∞ 2 –º–µ—Å—è—Ü–∞"
    elif months < 6:
        return f"–≤—Å–µ–≥–æ –∑–∞ {round(months)} –º–µ—Å—è—Ü–∞"
    else:
        return f"–≤—Å–µ–≥–æ –∑–∞ {round(months)} –º–µ—Å—è—Ü–µ–≤"

def smart_progress_message(weight_diff, fat_diff, days):
    if weight_diff < 0 and fat_diff < 0:
        return (
            f"üåü <b>WOW! –¢—ã –±–æ–ª—å—à–æ–π –º–æ–ª–æ–¥–µ—Ü!</b>\n"
            f"–¢—ã —Å–Ω–∏–∑–∏–ª –≤–µ—Å –Ω–∞ <b>{abs(weight_diff):.1f} –∫–≥</b> –∏ –∂–∏—Ä –Ω–∞ <b>{abs(fat_diff):.1f}%</b> ‚Äî "
            f"{describe_period(days)}! üî•\n"
            f"–ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Å—è!"
        )
    elif weight_diff < 0 and fat_diff > 0:
        return (
            f"üìâ –í–µ—Å —Å–Ω–∏–∑–∏–ª—Å—è –Ω–∞ <b>{abs(weight_diff):.1f} –∫–≥</b>! üî•\n"
            f"–ù–æ % –∂–∏—Ä–∞ –≤—ã—Ä–æ—Å –Ω–∞ <b>{abs(fat_diff):.1f}%</b> ‚Äî —Ç–∞–∫–æ–µ –±—ã–≤–∞–µ—Ç.\n"
            f"{describe_period(days).capitalize()} ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–π üí™"
        )
    elif weight_diff > 0 and fat_diff < 0:
        return (
            f"üéØ –ñ–∏—Ä —Å–Ω–∏–∑–∏–ª—Å—è –Ω–∞ <b>{abs(fat_diff):.1f}%</b>! üéâ\n"
            f"–ê –≤–µ—Å –≤—ã—Ä–æ—Å –Ω–∞ <b>{abs(weight_diff):.1f} –∫–≥</b> ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –º—ã—à—Ü—ã –∏–ª–∏ –≤–æ–¥–∞.\n"
            f"{describe_period(days).capitalize()} ‚Äî —Å—É–ø–µ—Ä!"
        )
    elif weight_diff == 0 and fat_diff == 0:
        return f"üìä –£ —Ç–µ–±—è —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å.\n{describe_period(days).capitalize()} ‚Äî —ç—Ç–æ —É–∂–µ —Ö–æ—Ä–æ—à–æ!"
    else:
        return (
            f"‚ö†Ô∏è –ï—Å—Ç—å –Ω–µ–±–æ–ª—å—à–æ–π —Ä–æ—Å—Ç –≤–µ—Å–∞ –∏–ª–∏ –∂–∏—Ä–∞.\n"
            f"{describe_period(days).capitalize()} ‚Äî —Ç—ã —É–∂–µ —Å–¥–µ–ª–∞–ª —à–∞–≥, –Ω–µ —Å–¥–∞–≤–∞–π—Å—è!"
        )

async def show_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = next(get_db())
    user = get_user_by_telegram_id(update.effective_user.id)
    if not user:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode="HTML")
        return

    records = get_all_records_for_user(user.id, db)
    if not records or len(records) < 2:
        await update.message.reply_text("‚ÑπÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.", parse_mode="HTML")
        return

    weight_records = sorted([(r.created_at.date(), r.weight) for r in records if r.weight is not None])
    fat_records = sorted([(r.created_at.date(), r.body_fat) for r in records if r.body_fat is not None])

    if len(weight_records) < 2 or len(fat_records) < 2:
        await update.message.reply_text("üìâ –ù—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã 2 –∑–∞–ø–∏—Å–∏ –≤–µ—Å–∞ –∏ –∂–∏—Ä–∞ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.", parse_mode="HTML")
        return

    dates = [d for d, w in weight_records]
    weights = [w for d, w in weight_records]
    weight_diff = weights[-1] - weights[0]
    fat_diff = fat_records[-1][1] - fat_records[0][1]
    days = (dates[-1] - dates[0]).days

    # –ì—Ä–∞—Ñ–∏–∫
    plt.figure(figsize=(8, 4))
    plt.plot(dates, weights, marker='o', linestyle='-', linewidth=2, label='–í–µ—Å (–∫–≥)')
    plt.title("–ü—Ä–æ–≥—Ä–µ—Å—Å –≤–µ—Å–∞")
    plt.xlabel("–î–∞—Ç–∞")
    plt.ylabel("–í–µ—Å (–∫–≥)")
    plt.grid(True)
    plt.tight_layout()

    graph_path = "static/progress_graph.png"
    os.makedirs("static", exist_ok=True)
    plt.savefig(graph_path)
    plt.close()

    text = (
        "üìà <b>–í–æ—Ç –∫–∞–∫ —Ç—ã –ø—Ä–æ–¥–≤–∏–≥–∞–µ—à—å—Å—è:</b>\n\n"
        f"{smart_progress_message(weight_diff, fat_diff, days)}"
    )
    await update.message.reply_text(text, parse_mode="HTML")

    with open(graph_path, "rb") as f:
        await context.bot.send_photo(chat_id=update.effective_chat.id, photo=f)
