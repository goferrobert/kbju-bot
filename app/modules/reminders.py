from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from typing import List, Dict, Optional, Tuple
from datetime import datetime, timedelta
import json

from app.handlers.base import BaseHandler
from app.handlers.fsm_states import UserStates
from app.db.models import User, UserReminder
from app.utils.validation import ValidationError
from app.utils.logging import get_logger

logger = get_logger(__name__)

class RemindersHandler(BaseHandler):
    """Handler for managing user reminders."""

    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    MESSAGES = {
        "start": (
            "‚è∞ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        ),
        "list": (
            "üìã <b>–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</b>\n\n"
            "{reminders}\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ:"
        ),
        "reminder": (
            "‚Ä¢ {time} - {type}\n"
            "  –°—Ç–∞—Ç—É—Å: {status}"
        ),
        "create": (
            "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:"
        ),
        "time": (
            "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 09:00"
        ),
        "success": "‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ {action}",
        "delete_confirm": (
            "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?\n"
            "‚Ä¢ –í—Ä–µ–º—è: {time}\n"
            "‚Ä¢ –¢–∏–ø: {type}"
        ),
        "no_reminders": "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.",
        "invalid_time": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú",
        "invalid_type": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
        "back": "–ù–∞–∑–∞–¥"
    }

    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    KEYBOARD = {
        "main": [
            [
                InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π", callback_data="list"),
                InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="create")
            ],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")]
        ],
        "types": [
            [
                InlineKeyboardButton("–í–µ—Å", callback_data="weight"),
                InlineKeyboardButton("–®–∞–≥–∏", callback_data="steps")
            ],
            [
                InlineKeyboardButton("–°–ø–æ—Ä—Ç", callback_data="sport"),
                InlineKeyboardButton("–ü–∏—Ç–∞–Ω–∏–µ", callback_data="nutrition")
            ],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")]
        ],
        "actions": [
            [
                InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit"),
                InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data="delete")
            ],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")]
        ]
    }

    REMINDER_TYPES = {
        "weight": "–í–µ—Å",
        "steps": "–®–∞–≥–∏",
        "sport": "–°–ø–æ—Ä—Ç",
        "nutrition": "–ü–∏—Ç–∞–Ω–∏–µ"
    }

    def format_reminder(self, reminder: UserReminder) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
        
        Args:
            reminder: –û–±—ä–µ–∫—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        """
        return self.MESSAGES["reminder"].format(
            time=reminder.time.strftime("%H:%M"),
            type=self.REMINDER_TYPES.get(reminder.type, reminder.type),
            status="‚úÖ –ê–∫—Ç–∏–≤–Ω–æ" if reminder.is_active else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ"
        )

    def format_reminders_list(self, reminders: List[UserReminder]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.
        
        Args:
            reminders: –°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        """
        if not reminders:
            return self.MESSAGES["no_reminders"]
        
        return "\n".join(self.format_reminder(r) for r in reminders)

    def validate_time(self, time_str: str) -> Optional[datetime.time]:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
        
        Args:
            time_str: –°—Ç—Ä–æ–∫–∞ —Å –≤—Ä–µ–º–µ–Ω–µ–º
            
        Returns:
            Optional[datetime.time]: –û–±—ä–µ–∫—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ None
        """
        try:
            hour, minute = map(int, time_str.split(":"))
            if 0 <= hour <= 23 and 0 <= minute <= 59:
                return datetime.time(hour, minute)
        except (ValueError, TypeError):
            pass
        return None

    @BaseHandler.handle_errors
    async def start_reminders(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """
        –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏.
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
            
        Returns:
            int: –ö–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã
        """
        await self.send_message(
            update,
            self.MESSAGES["start"],
            reply_markup=InlineKeyboardMarkup(self.KEYBOARD["main"])
        )
        return UserStates.WAITING_FOR_REMINDER_ACTION

    @BaseHandler.handle_errors
    async def list_reminders(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
            
        Returns:
            int: –ö–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã
        """
        query = update.callback_query
        await query.answer()

        user = await self.get_user(update.effective_user.id)
        if not user:
            raise ValidationError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

        reminders = await self.get_all_reminders(user.id)
        message = self.MESSAGES["list"].format(
            reminders=self.format_reminders_list(reminders)
        )

        await self.send_message(
            update,
            message,
            reply_markup=InlineKeyboardMarkup(self.KEYBOARD["main"])
        )
        return UserStates.WAITING_FOR_REMINDER_ACTION

    @BaseHandler.handle_errors
    async def create_reminder(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
            
        Returns:
            int: –ö–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã
        """
        query = update.callback_query
        await query.answer()

        await self.send_message(
            update,
            self.MESSAGES["create"],
            reply_markup=InlineKeyboardMarkup(self.KEYBOARD["types"])
        )
        return UserStates.WAITING_FOR_REMINDER_TYPE

    @BaseHandler.handle_errors
    async def select_reminder_type(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """
        –í—ã–±–æ—Ä —Ç–∏–ø–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
            
        Returns:
            int: –ö–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã
        """
        query = update.callback_query
        await query.answer()

        if query.data == "back":
            return await self.start_reminders(update, context)

        if query.data not in self.REMINDER_TYPES:
            await self.send_message(update, self.MESSAGES["invalid_type"])
            return await self.create_reminder(update, context)

        context.user_data["reminder_type"] = query.data
        await self.send_message(update, self.MESSAGES["time"])
        return UserStates.WAITING_FOR_REMINDER_TIME

    @BaseHandler.handle_errors
    async def set_reminder_time(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
            
        Returns:
            int: –ö–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã
        """
        time_str = update.message.text
        time = self.validate_time(time_str)

        if not time:
            await self.send_message(update, self.MESSAGES["invalid_time"])
            return UserStates.WAITING_FOR_REMINDER_TIME

        user = await self.get_user(update.effective_user.id)
        if not user:
            raise ValidationError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

        reminder_type = context.user_data.get("reminder_type")
        if not reminder_type:
            return await self.start_reminders(update, context)

        # –°–æ–∑–¥–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        reminder = UserReminder(
            user_id=user.id,
            type=reminder_type,
            time=time,
            is_active=True
        )
        await self.save_reminder(reminder)

        await self.send_message(
            update,
            self.MESSAGES["success"].format(action="—Å–æ–∑–¥–∞–Ω–æ"),
            reply_markup=InlineKeyboardMarkup(self.KEYBOARD["main"])
        )
        return UserStates.WAITING_FOR_REMINDER_ACTION

    @BaseHandler.handle_errors
    async def edit_reminder(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """
        –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
            
        Returns:
            int: –ö–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã
        """
        query = update.callback_query
        await query.answer()

        reminder_id = context.user_data.get("selected_reminder_id")
        if not reminder_id:
            return await self.start_reminders(update, context)

        reminder = await self.get_reminder(reminder_id)
        if not reminder:
            return await self.start_reminders(update, context)

        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
        reminder.is_active = not reminder.is_active
        await self.save_reminder(reminder)

        await self.send_message(
            update,
            self.MESSAGES["success"].format(
                action="–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ" if reminder.is_active else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ"
            ),
            reply_markup=InlineKeyboardMarkup(self.KEYBOARD["main"])
        )
        return UserStates.WAITING_FOR_REMINDER_ACTION

    @BaseHandler.handle_errors
    async def delete_reminder(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
            
        Returns:
            int: –ö–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã
        """
        query = update.callback_query
        await query.answer()

        reminder_id = context.user_data.get("selected_reminder_id")
        if not reminder_id:
            return await self.start_reminders(update, context)

        reminder = await self.get_reminder(reminder_id)
        if not reminder:
            return await self.start_reminders(update, context)

        await self.delete_reminder(reminder_id)

        await self.send_message(
            update,
            self.MESSAGES["success"].format(action="—É–¥–∞–ª–µ–Ω–æ"),
            reply_markup=InlineKeyboardMarkup(self.KEYBOARD["main"])
        )
        return UserStates.WAITING_FOR_REMINDER_ACTION

def get_reminders_handler() -> ConversationHandler:
    """Get the reminders conversation handler."""
    handler = RemindersHandler()
    return ConversationHandler(
        entry_points=[handler.start_reminders],
        states={
            UserStates.WAITING_FOR_REMINDER_ACTION: [
                handler.list_reminders,
                handler.create_reminder
            ],
            UserStates.WAITING_FOR_REMINDER_TYPE: [
                handler.select_reminder_type
            ],
            UserStates.WAITING_FOR_REMINDER_TIME: [
                handler.set_reminder_time
            ]
        },
        fallbacks=[]
    ) 