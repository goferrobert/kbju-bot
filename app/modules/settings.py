from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from typing import Optional

from app.handlers.base import BaseHandler
from app.handlers.fsm_states import UserStates
from app.db.models import UserSettings
from app.utils.validation import ValidationError
from app.utils.logger import get_logger

logger = get_logger(__name__)

class SettingsHandler(BaseHandler):
    """Handler for managing user settings."""

    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    MESSAGES = {
        "start": (
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
        ),
        "language": (
            "üåê <b>–Ø–∑—ã–∫</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —è–∑—ã–∫:"
        ),
        "units": (
            "üìè <b>–ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è:"
        ),
        "theme": (
            "üé® <b>–¢–µ–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—É—é —Ç–µ–º—É:"
        ),
        "privacy": (
            "üîí <b>–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å</b>\n\n"
            "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:"
        ),
        "success": "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!",
        "error": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫."
    }

    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    KEYBOARD = {
        "main": [
            [
                InlineKeyboardButton("–Ø–∑—ã–∫", callback_data="language"),
                InlineKeyboardButton("–ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è", callback_data="units")
            ],
            [
                InlineKeyboardButton("–¢–µ–º–∞", callback_data="theme"),
                InlineKeyboardButton("–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å", callback_data="privacy")
            ],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")]
        ],
        "language": [
            [
                InlineKeyboardButton("–†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
                InlineKeyboardButton("English", callback_data="lang_en")
            ],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")]
        ],
        "units": [
            [
                InlineKeyboardButton("–ú–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è", callback_data="units_metric"),
                InlineKeyboardButton("–ò–º–ø–µ—Ä—Å–∫–∞—è", callback_data="units_imperial")
            ],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")]
        ],
        "theme": [
            [
                InlineKeyboardButton("–°–≤–µ—Ç–ª–∞—è", callback_data="theme_light"),
                InlineKeyboardButton("–¢–µ–º–Ω–∞—è", callback_data="theme_dark")
            ],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")]
        ],
        "privacy": [
            [
                InlineKeyboardButton("–ü—É–±–ª–∏—á–Ω—ã–π", callback_data="privacy_public"),
                InlineKeyboardButton("–ü—Ä–∏–≤–∞—Ç–Ω—ã–π", callback_data="privacy_private")
            ],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")]
        ]
    }

    async def get_user_settings(self, user_id: int) -> Optional[UserSettings]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Optional[UserSettings]: –û–±—ä–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–ª–∏ None
        """
        return await self.session.query(UserSettings).filter(
            UserSettings.user_id == user_id
        ).first()

    async def create_user_settings(self, user_id: int) -> UserSettings:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            UserSettings: –°–æ–∑–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
        """
        settings = UserSettings(
            user_id=user_id,
            language="ru",
            units="metric",
            theme="light",
            privacy="private",
            settings_raw="{}"
        )
        self.session.add(settings)
        await self.session.commit()
        return settings

    @BaseHandler.handle_errors
    async def start_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """
        –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
            
        Returns:
            int: –ö–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã
        """
        await self.send_message(
            update,
            self.MESSAGES["start"],
            reply_markup=InlineKeyboardMarkup(self.KEYBOARD["main"])
        )
        return UserStates.WAITING_FOR_SETTINGS_SECTION

    @BaseHandler.handle_errors
    async def select_section(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–¥–µ–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫.
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
            
        Returns:
            int: –ö–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã
        """
        query = update.callback_query
        await query.answer()

        if query.data == "back":
            return ConversationHandler.END

        section = query.data
        if section in self.MESSAGES:
            await self.send_message(
                update,
                self.MESSAGES[section],
                reply_markup=InlineKeyboardMarkup(self.KEYBOARD[section])
            )

        return UserStates.WAITING_FOR_SETTINGS_VALUE

    @BaseHandler.handle_errors
    async def save_setting(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
            
        Returns:
            int: –ö–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã
        """
        query = update.callback_query
        await query.answer()

        if query.data == "back":
            return await self.start_settings(update, context)

        setting_type, value = query.data.split("_")
        user = await self.get_user(update.effective_user.id)
        if not user:
            raise ValidationError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

        settings = await self.get_user_settings(user.id)
        if not settings:
            settings = await self.create_user_settings(user.id)

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        setattr(settings, setting_type, value)
        await self.session.commit()

        await self.send_message(update, self.MESSAGES["success"])
        return await self.start_settings(update, context)

def get_settings_handler() -> ConversationHandler:
    """Get the settings conversation handler."""
    handler = SettingsHandler()
    return ConversationHandler(
        entry_points=[handler.start_settings],
        states={
            UserStates.WAITING_FOR_SETTINGS_SECTION: [
                handler.select_section
            ],
            UserStates.WAITING_FOR_SETTINGS_VALUE: [
                handler.save_setting
            ]
        },
        fallbacks=[]
    ) 