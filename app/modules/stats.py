from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from typing import List, Dict, Optional
import matplotlib.pyplot as plt
import io

from app.handlers.base import BaseHandler
from app.handlers.fsm_states import UserStates
from app.db.models import UserRecord
from app.utils.validation import ValidationError
from app.utils.logger import get_logger

logger = get_logger(__name__)

class StatsHandler(BaseHandler):
    """Handler for displaying user statistics."""

    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    MESSAGES = {
        "start": (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:"
        ),
        "weight": (
            "‚öñÔ∏è <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–µ—Å–∞</b>\n\n"
            "‚Ä¢ –ù–∞—á–∞–ª—å–Ω—ã–π –≤–µ—Å: {start:.1f} –∫–≥\n"
            "‚Ä¢ –¢–µ–∫—É—â–∏–π –≤–µ—Å: {current:.1f} –∫–≥\n"
            "‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {change:+.1f} –∫–≥ ({percent:+.1f}%)\n"
            "‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –≤–µ—Å: {avg:.1f} –∫–≥\n"
            "‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å: {min:.1f} –∫–≥\n"
            "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å: {max:.1f} –∫–≥"
        ),
        "steps": (
            "üë£ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —à–∞–≥–æ–≤</b>\n\n"
            "‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤: {avg:.0f}\n"
            "‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {min}\n"
            "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {max}\n"
            "‚Ä¢ –í—Å–µ–≥–æ —à–∞–≥–æ–≤: {total:,}\n"
            "‚Ä¢ –î–Ω–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏: {days}"
        ),
        "sport": (
            "üèÉ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ø–æ—Ä—Ç–∞</b>\n\n"
            "‚Ä¢ –í—Å–µ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {total}\n"
            "‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {avg_duration:.0f} –º–∏–Ω\n"
            "‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.0f} –º–∏–Ω\n"
            "‚Ä¢ –õ—é–±–∏–º—ã–π –≤–∏–¥: {favorite}\n"
            "‚Ä¢ –°—Ä–µ–¥–Ω—è—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: {avg_intensity:.1f}"
        ),
        "body_fat": (
            "üìè <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∂–∏—Ä–∞</b>\n\n"
            "‚Ä¢ –ù–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç: {start:.1f}%\n"
            "‚Ä¢ –¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç: {current:.1f}%\n"
            "‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {change:+.1f}% ({percent:+.1f}%)\n"
            "‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç: {avg:.1f}%\n"
            "‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç: {min:.1f}%\n"
            "‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç: {max:.1f}%"
        ),
        "no_data": "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."
    }

    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    KEYBOARD = {
        "main": [
            [
                InlineKeyboardButton("–í–µ—Å", callback_data="weight"),
                InlineKeyboardButton("–®–∞–≥–∏", callback_data="steps")
            ],
            [
                InlineKeyboardButton("–°–ø–æ—Ä—Ç", callback_data="sport"),
                InlineKeyboardButton("–ñ–∏—Ä", callback_data="body_fat")
            ],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")]
        ]
    }

    def calculate_weight_stats(self, records: List[UserRecord]) -> Dict:
        """
        –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–µ—Å–∞.
        
        Args:
            records: –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Dict: –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        if not records:
            return {}

        weights = [r.weight for r in records]
        start_weight = weights[0]
        current_weight = weights[-1]
        weight_change = current_weight - start_weight
        weight_percent = (weight_change / start_weight) * 100

        return {
            "start": start_weight,
            "current": current_weight,
            "change": weight_change,
            "percent": weight_percent,
            "avg": sum(weights) / len(weights),
            "min": min(weights),
            "max": max(weights)
        }

    def calculate_steps_stats(self, records: List[UserRecord]) -> Dict:
        """
        –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —à–∞–≥–æ–≤.
        
        Args:
            records: –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Dict: –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        if not records:
            return {}

        steps = [r.steps for r in records if r.steps is not None]
        if not steps:
            return {}

        return {
            "avg": sum(steps) / len(steps),
            "min": min(steps),
            "max": max(steps),
            "total": sum(steps),
            "days": len(steps)
        }

    def calculate_sport_stats(self, records: List[UserRecord]) -> Dict:
        """
        –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–ø–æ—Ä—Ç–∞.
        
        Args:
            records: –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Dict: –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        if not records:
            return {}

        sport_records = [r for r in records if r.sport_type and r.sport_duration]
        if not sport_records:
            return {}

        durations = [r.sport_duration for r in sport_records]
        intensities = [r.sport_intensity for r in sport_records if r.sport_intensity]

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—é–±–∏–º—ã–π –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞
        sport_types = [r.sport_type for r in sport_records]
        favorite = max(set(sport_types), key=sport_types.count)

        return {
            "total": len(sport_records),
            "avg_duration": sum(durations) / len(durations),
            "total_time": sum(durations),
            "favorite": favorite,
            "avg_intensity": sum(intensities) / len(intensities) if intensities else 0
        }

    def calculate_body_fat_stats(self, records: List[UserRecord]) -> Dict:
        """
        –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∂–∏—Ä–∞.
        
        Args:
            records: –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Dict: –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        if not records:
            return {}

        body_fat = [r.body_fat for r in records if r.body_fat is not None]
        if not body_fat:
            return {}

        start_fat = body_fat[0]
        current_fat = body_fat[-1]
        fat_change = current_fat - start_fat
        fat_percent = (fat_change / start_fat) * 100

        return {
            "start": start_fat,
            "current": current_fat,
            "change": fat_change,
            "percent": fat_percent,
            "avg": sum(body_fat) / len(body_fat),
            "min": min(body_fat),
            "max": max(body_fat)
        }

    def create_stats_graph(self, records: List[UserRecord], stat_type: str) -> Optional[io.BytesIO]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
        
        Args:
            records: –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            stat_type: –¢–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            
        Returns:
            Optional[io.BytesIO]: –û–±—ä–µ–∫—Ç BytesIO —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º –≥—Ä–∞—Ñ–∏–∫–æ–º –∏–ª–∏ None
        """
        if not records:
            return None

        plt.figure(figsize=(10, 6))
        dates = [r.created_at for r in records]

        if stat_type == "weight":
            values = [r.weight for r in records]
            plt.plot(dates, values, 'b-', label='–í–µ—Å (–∫–≥)', linewidth=2)
            plt.scatter(dates, values, color='blue', s=50)
            plt.title('–î–∏–Ω–∞–º–∏–∫–∞ –≤–µ—Å–∞', fontsize=14)
            plt.ylabel('–í–µ—Å (–∫–≥)', fontsize=12)

        elif stat_type == "steps":
            values = [r.steps for r in records if r.steps is not None]
            if not values:
                return None
            plt.plot(dates[:len(values)], values, 'g-', label='–®–∞–≥–∏', linewidth=2)
            plt.scatter(dates[:len(values)], values, color='green', s=50)
            plt.title('–î–∏–Ω–∞–º–∏–∫–∞ —à–∞–≥–æ–≤', fontsize=14)
            plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤', fontsize=12)

        elif stat_type == "body_fat":
            values = [r.body_fat for r in records if r.body_fat is not None]
            if not values:
                return None
            plt.plot(dates[:len(values)], values, 'r-', label='–ü—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞ (%)', linewidth=2)
            plt.scatter(dates[:len(values)], values, color='red', s=50)
            plt.title('–î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∂–∏—Ä–∞', fontsize=14)
            plt.ylabel('–ü—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞ (%)', fontsize=12)

        else:
            return None

        plt.xlabel('–î–∞—Ç–∞', fontsize=12)
        plt.grid(True, linestyle='--', alpha=0.7)
        plt.legend()

        # Format x-axis dates
        plt.gcf().autofmt_xdate()

        # Save plot to bytes
        buf = io.BytesIO()
        plt.savefig(buf, format='png', dpi=300, bbox_inches='tight')
        buf.seek(0)
        plt.close()

        return buf

    @BaseHandler.handle_errors
    async def start_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """
        –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
            
        Returns:
            int: –ö–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã
        """
        await self.send_message(
            update,
            self.MESSAGES["start"],
            reply_markup=InlineKeyboardMarkup(self.KEYBOARD["main"])
        )
        return UserStates.WAITING_FOR_STATS_TYPE

    @BaseHandler.handle_errors
    async def show_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
            
        Returns:
            int: –ö–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã
        """
        query = update.callback_query
        await query.answer()

        if query.data == "back":
            return ConversationHandler.END

        stat_type = query.data
        user = await self.get_user(update.effective_user.id)
        if not user:
            raise ValidationError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

        records = await self.get_all_records(user.id)
        if not records:
            await self.send_message(update, self.MESSAGES["no_data"])
            return await self.start_stats(update, context)

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if stat_type == "weight":
            stats = self.calculate_weight_stats(records)
            if stats:
                message = self.MESSAGES["weight"].format(**stats)
            else:
                message = self.MESSAGES["no_data"]

        elif stat_type == "steps":
            stats = self.calculate_steps_stats(records)
            if stats:
                message = self.MESSAGES["steps"].format(**stats)
            else:
                message = self.MESSAGES["no_data"]

        elif stat_type == "sport":
            stats = self.calculate_sport_stats(records)
            if stats:
                message = self.MESSAGES["sport"].format(**stats)
            else:
                message = self.MESSAGES["no_data"]

        elif stat_type == "body_fat":
            stats = self.calculate_body_fat_stats(records)
            if stats:
                message = self.MESSAGES["body_fat"].format(**stats)
            else:
                message = self.MESSAGES["no_data"]

        else:
            return await self.start_stats(update, context)

        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        graph = self.create_stats_graph(records, stat_type)
        if graph:
            await self.send_photo(update, graph, caption=message, parse_mode="HTML")
        else:
            await self.send_message(update, message, parse_mode="HTML")

        return await self.start_stats(update, context)

def get_stats_handler() -> ConversationHandler:
    """Get the stats conversation handler."""
    handler = StatsHandler()
    return ConversationHandler(
        entry_points=[handler.start_stats],
        states={
            UserStates.WAITING_FOR_STATS_TYPE: [
                handler.show_stats
            ]
        },
        fallbacks=[]
    ) 