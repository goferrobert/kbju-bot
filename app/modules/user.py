# üì¶ –ú–æ–¥—É–ª—å: modules/user.py
# –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∞–Ω–∫–µ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ /edit

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ContextTypes, ConversationHandler, MessageHandler,
    CommandHandler, CallbackQueryHandler, filters
)
from datetime import datetime
from app.db.crud import get_user_by_telegram_id, create_user, update_user
from app.ui.keyboards import menu_callback_handler
from app.modules.first_touch import after_form_finished

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
BASIC_NAME, BASIC_BIRTHDAY, BASIC_HEIGHT, BASIC_SEX = range(100, 104)

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: –ø–µ—Ä–≤—ã–π –≤—Ö–æ–¥ –≤ –±–æ—Ç–∞
async def handle_user_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    telegram_id = update.effective_user.id
    user = get_user_by_telegram_id(telegram_id)

    if user is None:
        context.user_data["flow"] = "first_touch"
        return await start_user_form(update, context)

    if not context.user_data.get("skip_registered_message"):
        await update.message.reply_text("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, —Ç—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
    from app.ui.menu import send_main_menu
    await send_main_menu(update, context)
    return ConversationHandler.END

# /edit ‚Äî —Ä—É—á–Ω–æ–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∞–Ω–∫–µ—Ç—ã
async def handle_user_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úèÔ∏è –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ –∞–Ω–∫–µ—Ç—ã.")
    return await start_user_form(update, context)

# –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –∞–Ω–∫–µ—Ç—ã ‚Äî –∏–º—è
async def start_user_form(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ.\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? (–§–ò–û –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∏–º—è)",
        parse_mode="HTML"
    )
    return BASIC_NAME

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ (–§–ò–û)
async def handle_basic_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    fio = update.message.text.strip().split()
    first_name = fio[0] if len(fio) > 0 else ""
    last_name = " ".join(fio[1:]) if len(fio) > 1 else None
    context.user_data["first_name"] = first_name
    context.user_data["last_name"] = last_name
    context.user_data["name"] = update.message.text.strip()
    await update.message.reply_text("üìÖ –£–∫–∞–∂–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):", parse_mode="HTML")
    return BASIC_BIRTHDAY

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
async def handle_basic_birthday(update: Update, context: ContextTypes.DEFAULT_TYPE):
    date_text = update.message.text.strip()
    try:
        birthday = datetime.strptime(date_text, "%d.%m.%Y").date()
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ –¥–∞—Ç—É –∫–∞–∫ –î–î.–ú–ú.–ì–ì–ì–ì", parse_mode="HTML")
        return BASIC_BIRTHDAY

    context.user_data["birthday"] = birthday
    await update.message.reply_text("üìè –£–∫–∞–∂–∏ —Å–≤–æ–π —Ä–æ—Å—Ç (–≤ —Å–º):", parse_mode="HTML")
    return BASIC_HEIGHT

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–æ—Å—Ç–∞
async def handle_basic_height(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        height = int(update.message.text.strip())
        if not (100 <= height <= 250):
            raise ValueError
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–æ—Ç 100 –¥–æ 250)", parse_mode="HTML")
        return BASIC_HEIGHT

    context.user_data["height"] = height
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–º—É–∂—Å–∫–æ–π", callback_data="sex_–º—É–∂—Å–∫–æ–π")],
        [InlineKeyboardButton("–∂–µ–Ω—Å–∫–∏–π", callback_data="sex_–∂–µ–Ω—Å–∫–∏–π")]
    ])
    await update.message.reply_text("üöª –£–∫–∞–∂–∏ –ø–æ–ª:", reply_markup=keyboard)
    return BASIC_SEX

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞ —á–µ—Ä–µ–∑ callback
async def handle_basic_sex_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    sex = query.data.split("_")[1]

    if sex not in ["–º—É–∂—Å–∫–æ–π", "–∂–µ–Ω—Å–∫–∏–π"]:
        await query.message.reply_text("‚ùå –í—ã–±–µ—Ä–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: –º—É–∂—Å–∫–æ–π –∏–ª–∏ –∂–µ–Ω—Å–∫–∏–π")
        return BASIC_SEX

    context.user_data["sex"] = sex
    telegram_user = update.effective_user

    existing_user = get_user_by_telegram_id(telegram_user.id)
    if existing_user:
        update_user(
            telegram_user.id,
            telegram_user.username,
            context.user_data.get("first_name", ""),
            context.user_data.get("last_name", None),
            context.user_data.get("name", telegram_user.full_name),
            sex,
            context.user_data["birthday"],
            context.user_data["height"]
        )
        await query.message.edit_text("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", parse_mode="HTML")
    else:
        create_user(
            telegram_id=telegram_user.id,
            username=telegram_user.username,
            first_name=context.user_data.get("first_name", ""),
            last_name=context.user_data.get("last_name", None),
            name=context.user_data.get("name", telegram_user.full_name),
            sex=sex,
            date_of_birth=context.user_data["birthday"],
            height=context.user_data["height"]
        )
        await query.message.edit_text("‚úÖ –ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!", parse_mode="HTML")

    if context.user_data.get("flow") == "first_touch":
        await after_form_finished(update, context)
        return ConversationHandler.END


    from app.ui.menu import send_main_menu
    await send_main_menu(update, context)
    return ConversationHandler.END

# === ConversationHandler –¥–ª—è –∞–Ω–∫–µ—Ç—ã ===
user_flow_handler = ConversationHandler(
    entry_points=[
        CommandHandler("start", handle_user_start),
        CommandHandler("edit", handle_user_edit),
    ],
    states={
        BASIC_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_basic_name)],
        BASIC_BIRTHDAY: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_basic_birthday)],
        BASIC_HEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_basic_height)],
        BASIC_SEX: [CallbackQueryHandler(handle_basic_sex_callback, pattern=r"^sex_")],
    },
    fallbacks=[],
)

menu_handler = menu_callback_handler()
