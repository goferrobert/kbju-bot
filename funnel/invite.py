from telegram.constants import ParseMode
from telegram import Update
from telegram.ext import ContextTypes
from datetime import timedelta

PHOTO_PATH = "data/1.jpg"
TELEGRAM_USERNAME = "@dryuzefovna"
LINK = f"https://t.me/{TELEGRAM_USERNAME.lstrip('@')}"

async def send_consultation_invite(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id

    # 1. –§–æ—Ç–æ
    with open(PHOTO_PATH, "rb") as photo:
        await context.bot.send_photo(chat_id=chat_id, photo=photo)

    # 2. –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º
    text = (
        "üì© –•–æ—á–µ—à—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –ø–∏—Ç–∞–Ω–∏–µ–º, –†–ü–ü –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º –∫ —Ç–µ–ª—É?\n\n"
        f"–ó–∞–ø–∏—à–∏—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é ‚Äî —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–Ω—è—Ç—å –ø—Ä–∏—á–∏–Ω—ã —Ç—Ä—É–¥–Ω–æ—Å—Ç–µ–π, "
        f"–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç —Å —Ç–µ–ª–æ–º –∏ –≤—ã—Å—Ç—Ä–æ–∏—Ç—å –ø–∏—Ç–∞–Ω–∏–µ –±–µ–∑ —Å—Ç—Ä–µ—Å—Å–∞.\n\n"
        f"–ù–∞–ø–∏—à–∏ üëâ [{TELEGRAM_USERNAME}]({LINK})"
    )
    await context.bot.send_message(chat_id=chat_id, text=text, parse_mode=ParseMode.MARKDOWN)

    # 3. –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    schedule_reminders(context, chat_id)

def schedule_reminders(context: ContextTypes.DEFAULT_TYPE, chat_id: int):
    intervals = [
        ("‚è≥ –ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.\n\n" +
         f"–ü–∏—à–∏ üëâ [{TELEGRAM_USERNAME}]({LINK})", timedelta(hours=2)),

        ("üìå –≠–π! –¢—ã –µ—â—ë –Ω–µ –∑–∞–ø–∏—Å–∞–ª–∞—Å—å ‚Äî –∞ –≤–µ–¥—å —ç—Ç–æ –º–æ–∂–µ—Ç —Å–∏–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–≤–æ—ë –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Å–µ–±–µ.\n" +
         f"–ù–∞–ø–∏—à–∏ üëâ [{TELEGRAM_USERNAME}]({LINK})", timedelta(hours=24)),

        ("üïä –ù–∞–ø–æ–º–∏–Ω–∞—é –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ ‚Äî –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –ø—É—Ç—å –∫ —Ç–µ–ª—É –∏ —Å–ø–æ–∫–æ–π–Ω–æ–º—É –ø–∏—Ç–∞–Ω–∏—é –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.\n\n" +
         f"–ü–∏—à–∏ üëâ [{TELEGRAM_USERNAME}]({LINK})", timedelta(days=7)),
    ]

    for message_text, when in intervals:
        context.job_queue.run_once(
            reminder_callback,
            when,
            data={"chat_id": chat_id, "text": message_text},
            name=f"reminder_{chat_id}_{when}"
        )

async def reminder_callback(context: ContextTypes.DEFAULT_TYPE):
    job_data = context.job.data
    await context.bot.send_message(
        chat_id=job_data["chat_id"],
        text=job_data["text"],
        parse_mode=ParseMode.MARKDOWN
    )
