from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
import logging

from states.fsm_states import FoodStates
from utils.texts import get_food_preferences_text
from utils.buttons import get_main_menu_inline_keyboard, get_confirm_keyboard
from crud.user_crud import get_user, user_exists
from models.database import SessionLocal
from crud.food_crud import create_or_update_food_preferences, get_food_preferences

logging.basicConfig(filename='bot.log', level=logging.INFO, format='%(asctime)s %(levelname)s %(message)s')

async def start_food_preferences(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–∏—â–µ–≤—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π"""
    logging.info(f"start_food_preferences: user={message.from_user.id}")
    db = SessionLocal()
    user = get_user(db, message.from_user.id)
    if not user:
        db.close()
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –∞–Ω–∫–µ—Ç—É! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
    prefs = get_food_preferences(db, message.from_user.id)
    db.close()
    
    if prefs and (prefs.likes_raw or prefs.dislikes_raw):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        text = "üçé **–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:**\n\n"
        if prefs.likes_raw:
            text += f"‚úÖ **–õ—é–±–∏–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:**\n{prefs.likes_raw}\n\n"
        if prefs.dislikes_raw:
            text += f"‚ùå **–ù–µ–ª—é–±–∏–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:**\n{prefs.dislikes_raw}\n\n"
        text += "–•–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è?"
        
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_preferences"),
            types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_preferences")
        )
        
        await message.answer(text, parse_mode='Markdown', reply_markup=keyboard)
    else:
        # –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
        await message.answer("üçé **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∏—â–µ–≤—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π**\n\n–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å –≤–∞—à–∏—Ö –ª—é–±–∏–º—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤:\n\n‚úÖ **–ß—Ç–æ –≤—ã –ª—é–±–∏—Ç–µ –µ—Å—Ç—å?**\n\n–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –Ω—Ä–∞–≤—è—Ç—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∫—É—Ä–∏—Ü–∞, –æ–≤–æ—â–∏, —Ñ—Ä—É–∫—Ç—ã, —Ä—ã–±–∞, —Ç–≤–æ—Ä–æ–≥)")
        await FoodStates.likes.set()

async def process_likes(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ª—é–±–∏–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã"""
    logging.info(f"process_likes: user={message.from_user.id}")
    likes = message.text.strip()
    
    if len(likes) < 5:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ª—é–±–∏–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ–¥—Ä–æ–±–Ω–µ–µ (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª—é–±–∏–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
    await state.update_data(likes=likes)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–µ–ª—é–±–∏–º—ã–º –ø—Ä–æ–¥—É–∫—Ç–∞–º
    await message.answer("‚úÖ –õ—é–±–∏–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n–¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –Ω–µ –ª—é–±–∏—Ç–µ:\n\n‚ùå **–ß—Ç–æ –≤—ã –Ω–µ –ª—é–±–∏—Ç–µ –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –µ—Å—Ç—å?**\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: –º–æ–ª–æ–∫–æ, –æ—Ä–µ—Ö–∏, –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã, –æ—Å—Ç—Ä—ã–µ –±–ª—é–¥–∞")
    await FoodStates.dislikes.set()

async def process_dislikes(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–ª—é–±–∏–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã"""
    logging.info(f"process_dislikes: user={message.from_user.id}")
    dislikes = message.text.strip()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    likes = data.get('likes', '')
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ–ª—é–±–∏–º—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º)
    if dislikes and len(dislikes) < 3:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
    db = SessionLocal()
    create_or_update_food_preferences(db, message.from_user.id, likes_raw=likes, dislikes_raw=dislikes)
    db.close()
    
    await message.answer("‚úÖ –í–∞—à–∏ –ø–∏—â–µ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_menu_inline_keyboard())
    
    await state.finish()

async def show_food_preferences(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –ø–∏—â–µ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è"""
    logging.info(f"show_food_preferences: user={message.from_user.id}")
    db = SessionLocal()
    user = get_user(db, message.from_user.id)
    if not user:
        db.close()
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –∞–Ω–∫–µ—Ç—É! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    prefs = get_food_preferences(db, message.from_user.id)
    db.close()
    
    if prefs and (prefs.likes_raw or prefs.dislikes_raw):
        text = "üçé **–í–∞—à–∏ –ø–∏—â–µ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:**\n\n"
        if prefs.likes_raw:
            text += f"‚úÖ **–õ—é–±–∏–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:**\n{prefs.likes_raw}\n\n"
        if prefs.dislikes_raw:
            text += f"‚ùå **–ù–µ–ª—é–±–∏–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:**\n{prefs.dislikes_raw}"
    else:
        text = "üçé –ü–∏—â–µ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω—ã.\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üçé –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è' –¥–ª—è –∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
    
    await message.answer(text, parse_mode='Markdown', reply_markup=get_main_menu_inline_keyboard())

async def edit_preferences_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π"""
    if callback.data == "edit_preferences":
        await callback.message.edit_text("üçé **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π**\n\n–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å –≤–∞—à–∏—Ö –ª—é–±–∏–º—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤:\n\n‚úÖ **–ß—Ç–æ –≤—ã –ª—é–±–∏—Ç–µ –µ—Å—Ç—å?**\n\n–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –Ω—Ä–∞–≤—è—Ç—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∫—É—Ä–∏—Ü–∞, –æ–≤–æ—â–∏, —Ñ—Ä—É–∫—Ç—ã, —Ä—ã–±–∞, —Ç–≤–æ—Ä–æ–≥)")
        await FoodStates.likes.set()
    elif callback.data == "cancel_preferences":
        await callback.message.edit_text("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await callback.message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_menu_inline_keyboard())
    
    await callback.answer()

def register_food_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–∏—â–µ–≤—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π"""
    dp.register_message_handler(start_food_preferences, text="üçé –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è")
    dp.register_message_handler(show_food_preferences, text="üçé –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è")
    dp.register_message_handler(process_likes, state=FoodStates.likes)
    dp.register_message_handler(process_dislikes, state=FoodStates.dislikes)
    dp.register_callback_query_handler(edit_preferences_callback, lambda c: c.data in ["edit_preferences", "cancel_preferences"]) 