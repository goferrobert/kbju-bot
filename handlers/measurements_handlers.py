from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from datetime import date, datetime
import logging

from models.database import SessionLocal
from crud.user_crud import get_user
from crud.record_crud import create_or_update_record, get_latest_record
from states.fsm_states import MeasurementsStates
from utils.texts import (
    get_weight_request, get_waist_request, get_neck_request, get_hip_request,
    get_validation_error, get_final_results_text, get_kbju_explanation
)
from utils.buttons import get_main_menu_inline_keyboard
from utils.validators import validate_weight, validate_measurement
from utils.calculations import calculate_bodyfat, calculate_kbju, calculate_step_multiplier

async def start_new_measurements(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è"""
    logging.info(f"start_new_measurements: user={message.from_user.id}")
    db = SessionLocal()
    user = get_user(db, message.from_user.id)
    db.close()
    if not user:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –∞–Ω–∫–µ—Ç—É! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    await message.answer("üìù –î–∞–≤–∞–π—Ç–µ —Å–¥–µ–ª–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–º–µ—Ä—ã!")
    await ask_waist_measurement(message, state)

async def ask_waist_measurement(message: types.Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–µ —Ç–∞–ª–∏–∏"""
    logging.info(f"ask_waist_measurement: user={message.from_user.id}")
    await message.answer(get_waist_request())
    await MeasurementsStates.waist.set()

async def process_waist_measurement(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–µ —Ç–∞–ª–∏–∏"""
    waist = message.text.strip()
    logging.info(f"process_waist_measurement: user={message.from_user.id}, waist={waist}")
    from utils.validators import validate_waist_measurement
    if not validate_waist_measurement(waist):
        logging.warning(f"process_waist_measurement: user={message.from_user.id}, invalid waist={waist}")
        await message.answer(get_validation_error("–û–±—Ö–≤–∞—Ç —Ç–∞–ª–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 50 –¥–æ 200 —Å–º"))
        return
    await state.update_data(waist=float(waist))
    logging.info(f"process_waist_measurement: user={message.from_user.id}, waist accepted={waist}")
    await message.answer(f"‚úÖ –û–±—Ö–≤–∞—Ç —Ç–∞–ª–∏–∏: {waist} —Å–º")
    await ask_neck_measurement(message, state)

async def ask_neck_measurement(message: types.Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–µ —à–µ–∏"""
    logging.info(f"ask_neck_measurement: user={message.from_user.id}")
    await message.answer(get_neck_request())
    await MeasurementsStates.neck.set()

async def process_neck_measurement(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–µ —à–µ–∏"""
    neck = message.text.strip()
    logging.info(f"process_neck_measurement: user={message.from_user.id}, neck={neck}")
    from utils.validators import validate_neck_measurement
    if not validate_neck_measurement(neck):
        logging.warning(f"process_neck_measurement: user={message.from_user.id}, invalid neck={neck}")
        await message.answer(get_validation_error("–û–±—Ö–≤–∞—Ç —à–µ–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 20 –¥–æ 100 —Å–º"))
        return
    await state.update_data(neck=float(neck))
    logging.info(f"process_neck_measurement: user={message.from_user.id}, neck accepted={neck}")
    await message.answer(f"‚úÖ –û–±—Ö–≤–∞—Ç —à–µ–∏: {neck} —Å–º")
    await ask_hip_measurement(message, state)

async def ask_hip_measurement(message: types.Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–µ –±–µ–¥–µ—Ä (—Ç–æ–ª—å–∫–æ –¥–ª—è –∂–µ–Ω—â–∏–Ω)"""
    logging.info(f"ask_hip_measurement: user={message.from_user.id}")
    db = SessionLocal()
    user = get_user(db, message.from_user.id)
    db.close()
    if user.sex == 'female':
        await message.answer(get_hip_request())
        await MeasurementsStates.hip.set()
    else:
        await ask_weight_measurement(message, state)

async def process_hip_measurement(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–µ –±–µ–¥–µ—Ä"""
    hip = message.text.strip()
    logging.info(f"process_hip_measurement: user={message.from_user.id}, hip={hip}")
    from utils.validators import validate_hip_measurement
    if not validate_hip_measurement(hip):
        logging.warning(f"process_hip_measurement: user={message.from_user.id}, invalid hip={hip}")
        await message.answer(get_validation_error("–û–±—Ö–≤–∞—Ç –±–µ–¥–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 50 –¥–æ 200 —Å–º"))
        return
    await state.update_data(hip=float(hip))
    logging.info(f"process_hip_measurement: user={message.from_user.id}, hip accepted={hip}")
    await message.answer(f"‚úÖ –û–±—Ö–≤–∞—Ç –±–µ–¥–µ—Ä: {hip} —Å–º")
    await ask_weight_measurement(message, state)

async def ask_weight_measurement(message: types.Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–µ –≤–µ—Å–∞"""
    logging.info(f"ask_weight_measurement: user={message.from_user.id}")
    await message.answer("‚öñÔ∏è –ö–∞–∫–æ–π —É –≤–∞—Å —Ç–µ–∫—É—â–∏–π –≤–µ—Å?\n\n–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 70.5)")
    await MeasurementsStates.weight.set()

async def process_weight_measurement(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–µ –≤–µ—Å–∞"""
    weight = message.text.strip()
    logging.info(f"process_weight_measurement: user={message.from_user.id}, weight={weight}")
    from utils.validators import validate_weight
    
    if not validate_weight(weight):
        logging.warning(f"process_weight_measurement: user={message.from_user.id}, invalid weight={weight}")
        await message.answer(get_validation_error("–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 30 –¥–æ 300 –∫–≥"))
        return
    
    await state.update_data(weight=float(weight))
    logging.info(f"process_weight_measurement: user={message.from_user.id}, weight accepted={weight}")
    await message.answer(f"‚úÖ –í–µ—Å: {weight} –∫–≥")
    await ask_steps_measurement(message, state)

async def ask_steps_measurement(message: types.Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤"""
    logging.info(f"ask_steps_measurement: user={message.from_user.id}")
    from utils.texts import get_steps_request
    from utils.buttons import get_steps_keyboard
    await message.answer(get_steps_request(), reply_markup=get_steps_keyboard())
    await MeasurementsStates.steps.set()

async def process_steps_measurement(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä —à–∞–≥–æ–≤"""
    await callback.answer()
    steps = callback.data.split('_')[1]  # steps_8000-10000 -> 8000-10000
    logging.info(f"process_steps_measurement: user={callback.from_user.id}, steps={steps}")
    
    await state.update_data(steps=steps)
    await callback.message.edit_text(f"{callback.message.text}\n\n‚úÖ –í—ã–±—Ä–∞–Ω–æ: {steps} —à–∞–≥–æ–≤")
    await ask_sport_type_measurement(callback.message, state)

async def ask_sport_type_measurement(message: types.Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ç–∏–ø —Å–ø–æ—Ä—Ç–∞"""
    logging.info(f"ask_sport_type_measurement: user={message.from_user.id}")
    from utils.texts import get_sport_request
    from utils.buttons import get_sport_keyboard
    await message.answer(get_sport_request(), reply_markup=get_sport_keyboard())
    await MeasurementsStates.sport_type.set()

async def process_sport_type_measurement(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —Å–ø–æ—Ä—Ç–∞"""
    await callback.answer()
    sport_type = callback.data.split('_')[1]  # sport_running -> running
    logging.info(f"process_sport_type_measurement: user={callback.from_user.id}, sport_type={sport_type}")
    
    await state.update_data(sport_type=sport_type)
    await callback.message.edit_text(f"{callback.message.text}\n\n‚úÖ –í—ã–±—Ä–∞–Ω–æ: {sport_type}")
    await ask_sport_freq_measurement(callback.message, state)

async def ask_sport_freq_measurement(message: types.Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É —Å–ø–æ—Ä—Ç–∞"""
    logging.info(f"ask_sport_freq_measurement: user={message.from_user.id}")
    from utils.texts import get_frequency_request
    from utils.buttons import get_frequency_keyboard
    await message.answer(get_frequency_request(), reply_markup=get_frequency_keyboard())
    await MeasurementsStates.sport_freq.set()

async def process_sport_freq_measurement(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä —á–∞—Å—Ç–æ—Ç—ã —Å–ø–æ—Ä—Ç–∞"""
    await callback.answer()
    sport_freq = callback.data.split('_')[1]  # freq_3 -> 3
    logging.info(f"process_sport_freq_measurement: user={callback.from_user.id}, sport_freq={sport_freq}")
    
    await state.update_data(sport_freq=sport_freq)
    await callback.message.edit_text(f"{callback.message.text}\n\n‚úÖ –í—ã–±—Ä–∞–Ω–æ: {sport_freq} —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é")
    await finish_measurements(callback.message, state)

async def finish_measurements(message: types.Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"""
    logging.info(f"finish_measurements: user={message.from_user.id}")
    db = SessionLocal()
    measurements_data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ—Å—Ç–∞ –∏ –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    from crud.record_crud import get_latest_record
    latest_record = get_latest_record(db, message.from_user.id)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å —à–∞–≥–æ–≤
    from utils.calculations import calculate_step_multiplier
    step_multiplier = calculate_step_multiplier(measurements_data.get('steps', '8000-10000'))
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —Å–æ –≤—Å–µ–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    create_or_update_record(
        db,
        message.from_user.id,
        date.today(),
        weight=measurements_data['weight'],
        waist=measurements_data['waist'],
        neck=measurements_data['neck'],
        hip=measurements_data.get('hip'),
        steps=measurements_data.get('steps', '8000-10000'),
        sport_type=measurements_data.get('sport_type', 'none'),
        sport_freq=measurements_data.get('sport_freq', '0'),
        step_multiplier=step_multiplier,
        height=latest_record.height if latest_record else 170,
        goal=latest_record.goal if latest_record else 'maintain'
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∂–∏—Ä–∞
    user = get_user(db, message.from_user.id)
    db.close()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!")
        await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_menu_inline_keyboard())
        await state.finish()
        return
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞
    user_data = {
        'sex': user.sex,
        'height': latest_record.height if latest_record else 170,
        'weight': measurements_data['weight'],
        'waist': measurements_data['waist'],
        'neck': measurements_data['neck'],
        'hip': measurements_data.get('hip')
    }
    
    bodyfat = calculate_bodyfat(user_data)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    text = f"""‚úÖ **–ù–æ–≤—ã–µ –∑–∞–º–µ—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!**

üìä **–í–∞—à–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è:**
‚Ä¢ –í–µ—Å: {measurements_data['weight']} –∫–≥
‚Ä¢ –¢–∞–ª–∏—è: {measurements_data['waist']} —Å–º
‚Ä¢ –®–µ—è: {measurements_data['neck']} —Å–º"""

    if measurements_data.get('hip'):
        text += f"\n‚Ä¢ –ë—ë–¥—Ä–∞: {measurements_data['hip']} —Å–º"
    
    text += f"""

üèÉ‚Äç‚ôÇÔ∏è **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**
‚Ä¢ –®–∞–≥–∏: {measurements_data.get('steps', '8000-10000')}
‚Ä¢ –°–ø–æ—Ä—Ç: {measurements_data.get('sport_type', '–Ω–µ—Ç')}
‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞: {measurements_data.get('sport_freq', '0')} —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é

üî• **–ü—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞:** {bodyfat:.1f}%"""
    
    await message.answer(text, parse_mode='Markdown')
    await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_menu_inline_keyboard())
    
    await state.finish()

def register_measurements_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏–∑–º–µ—Ä–µ–Ω–∏–π"""
    dp.register_message_handler(start_new_measurements, text="üìù –ù–æ–≤—ã–µ –∑–∞–º–µ—Ä—ã")
    dp.register_message_handler(process_waist_measurement, state=MeasurementsStates.waist)
    dp.register_message_handler(process_neck_measurement, state=MeasurementsStates.neck)
    dp.register_message_handler(process_hip_measurement, state=MeasurementsStates.hip)
    dp.register_message_handler(process_weight_measurement, state=MeasurementsStates.weight)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è callback (—à–∞–≥–∏ –∏ —Å–ø–æ—Ä—Ç)
    dp.register_callback_query_handler(process_steps_measurement, lambda c: c.data.startswith('steps_'), state=MeasurementsStates.steps)
    dp.register_callback_query_handler(process_sport_type_measurement, lambda c: c.data.startswith('sport_'), state=MeasurementsStates.sport_type)
    dp.register_callback_query_handler(process_sport_freq_measurement, lambda c: c.data.startswith('freq_'), state=MeasurementsStates.sport_freq) 