from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
import logging

from utils.texts import get_main_menu_text
from utils.buttons import get_main_menu_inline_keyboard
from crud.user_crud import get_user
from utils.calculations import calculate_bodyfat, calculate_kbju
from utils.progress import create_progress_graph
from models.database import SessionLocal
from handlers.food_handlers import start_food_preferences
from handlers.measurements_handlers import start_new_measurements

async def start_new_measurements_wrapper(user_id: int, state: FSMContext):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è start_new_measurements"""
    from main import bot
    from aiogram import types
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    class FakeMessage:
        def __init__(self, user_id):
            self.from_user = types.User(id=user_id, is_bot=False, first_name="User")
            self.answer = lambda text, **kwargs: bot.send_message(user_id, text, **kwargs)
    
    fake_message = FakeMessage(user_id)
    await start_new_measurements(fake_message, state)

async def start_food_preferences_wrapper(user_id: int, state: FSMContext):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è start_food_preferences"""
    from main import bot
    from aiogram import types
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    class FakeMessage:
        def __init__(self, user_id):
            self.from_user = types.User(id=user_id, is_bot=False, first_name="User")
            self.answer = lambda text, **kwargs: bot.send_message(user_id, text, **kwargs)
    
    fake_message = FakeMessage(user_id)
    await start_food_preferences(fake_message, state)

async def show_main_menu(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    logging.info(f"show_main_menu: user={message.from_user.id}")
    await state.finish()
    
    db = SessionLocal()
    user = get_user(db, message.from_user.id)
    db.close()
    
    if not user:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –∞–Ω–∫–µ—Ç—É! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    await message.answer(get_main_menu_text(), reply_markup=get_main_menu_inline_keyboard())

async def show_my_data(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ message –∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é
        if hasattr(message, 'from_user') and hasattr(message.from_user, 'id'):
            user_id = message.from_user.id
        else:
            user_id = message  # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–ª–∏ user_id –Ω–∞–ø—Ä—è–º—É—é
        
        db = SessionLocal()
        user = get_user(db, user_id)
        db.close()
        
        if not user:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            if hasattr(message, 'answer'):
                await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –∞–Ω–∫–µ—Ç—É! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ user_id, –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ bot
                from main import bot
                await bot.send_message(user_id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –∞–Ω–∫–µ—Ç—É! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∂–∏—Ä–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∏–Ω–∞–º–∏–∫–∏
        db = SessionLocal()
        from crud.record_crud import get_latest_record
        latest_record = get_latest_record(db, user_id)
        db.close()
        
        if latest_record:
            user_data = {
                'sex': user.sex,
                'height': latest_record.height,
                'weight': latest_record.weight,
                'waist': latest_record.waist,
                'neck': latest_record.neck,
                'hip': latest_record.hip,
                'steps': latest_record.steps,
                'sport_type': latest_record.sport_type,
                'sport_freq': latest_record.sport_freq,
                'goal': latest_record.goal
            }
            bodyfat = calculate_bodyfat(user_data)
        else:
            bodyfat = 0
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        sport_names = {
            'none': '‚ùå –ù–µ –∑–∞–Ω–∏–º–∞—é—Å—å',
            'walking': 'üö∂ –•–æ–¥—å–±–∞/–ü—Ä–æ–≥—É–ª–∫–∏',
            'running': 'üèÉ –ë–µ–≥/–ö–∞—Ä–¥–∏–æ',
            'strength': 'üèãÔ∏è –¢—Ä–µ–Ω–∞–∂–µ—Ä–Ω—ã–π –∑–∞–ª',
            'yoga': 'üßò –ô–æ–≥–∞/–ü–∏–ª–∞—Ç–µ—Å',
            'swimming': 'üèä –ü–ª–∞–≤–∞–Ω–∏–µ',
            'cycling': 'üö¥ –í–µ–ª–æ—Å–∏–ø–µ–¥',
            'team': '‚öΩ –§—É—Ç–±–æ–ª/–ë–∞—Å–∫–µ—Ç–±–æ–ª'
        }
        
        goal_names = {
            'healthy': 'üßò –ó–¥–æ—Ä–æ–≤–æ–µ —Ç–µ–ª–æ',
            'athletic': 'üèã –°–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ —Ç–µ–ª–æ',
            'lean': 'üî• –°—É—Ö–æ–µ —Ç–µ–ª–æ'
        }
        
        text = f"""üìä **–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ**

üë§ **–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
‚Ä¢ –ò–º—è: {user.first_name}
‚Ä¢ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user.date_of_birth}
‚Ä¢ –ü–æ–ª: {'–ú—É–∂—Å–∫–æ–π' if user.sex == 'male' else '–ñ–µ–Ω—Å–∫–∏–π'}
‚Ä¢ –†–æ—Å—Ç: {latest_record.height if latest_record else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} —Å–º

üèÉ‚Äç‚ôÇÔ∏è **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**
‚Ä¢ –®–∞–≥–∏ –≤ –¥–µ–Ω—å: {latest_record.steps if latest_record else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚Ä¢ –°–ø–æ—Ä—Ç: {sport_names.get(latest_record.sport_type, '–ù–µ —É–∫–∞–∑–∞–Ω–æ') if latest_record else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞: {latest_record.sport_freq if latest_record else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é

üìê **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–º–µ—Ä—ã:**
‚Ä¢ –í–µ—Å: {latest_record.weight if latest_record else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} –∫–≥
‚Ä¢ –¢–∞–ª–∏—è: {latest_record.waist if latest_record else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} —Å–º
‚Ä¢ –®–µ—è: {latest_record.neck if latest_record else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} —Å–º"""

        if latest_record and latest_record.hip:
            text += f"\n‚Ä¢ –ë—ë–¥—Ä–∞: {latest_record.hip} —Å–º"
        
        text += f"""

üéØ **–¶–µ–ª—å:** {goal_names.get(latest_record.goal, '–ù–µ —É–∫–∞–∑–∞–Ω–∞') if latest_record else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
üî• **–ü—Ä–æ—Ü–µ–Ω—Ç –∂–∏—Ä–∞:** {bodyfat:.1f}%"""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        if hasattr(message, 'answer'):
            await message.answer(text, parse_mode='Markdown')
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ user_id, –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ bot
            from main import bot
            await bot.send_message(user_id, text, parse_mode='Markdown')
    except Exception as e:
        logging.error(f"show_my_data error: {e}")
        if hasattr(message, 'answer'):
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            from main import bot
            await bot.send_message(user_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def show_progress(user_id: int, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å"""
    try:
        db = SessionLocal()
        user = get_user(db, user_id)
        db.close()
        
        if not user:
            from main import bot
            await bot.send_message(user_id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –∞–Ω–∫–µ—Ç—É! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return
        
        db = SessionLocal()
        from crud.record_crud import get_user_records
        records = get_user_records(db, user_id)
        db.close()
        
        if len(records) < 2:
            from main import bot
            await bot.send_message(user_id, "üìà –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∑–∞–ø–∏—Å–∏. –°–¥–µ–ª–∞–π—Ç–µ –Ω–æ–≤—ã–µ –∑–∞–º–µ—Ä—ã!")
            return
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –¥–∞—Ç–µ (—Å—Ç–∞—Ä—ã–µ -> –Ω–æ–≤—ã–µ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞)
        records.sort(key=lambda x: x.date)
        
        # –ü–æ–ª—É—á–∞–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        from utils.progress import get_motivational_message
        motivational_text = get_motivational_message(records)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        from main import bot
        await bot.send_message(user_id, motivational_text, parse_mode='Markdown')
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        from utils.progress import create_progress_graph
        graph_path = create_progress_graph(records)
        
        if graph_path:
            with open(graph_path, 'rb') as photo:
                await bot.send_photo(
                    chat_id=user_id,
                    photo=photo,
                    caption="üìà –í–∞—à –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"
                )
        else:
            await bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")
    except Exception as e:
        logging.error(f"show_progress error: {e}")
        from main import bot
        await bot.send_message(user_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def show_consultation(user_id: int, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        types.InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É", url="https://t.me/dryuzefovna")
    )
    
    from main import bot
    await bot.send_message(
        user_id,
        "üí¨ **–ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é**\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –¥–∏–µ—Ç–æ–ª–æ–≥–æ–º –ï–∫–∞—Ç–µ—Ä–∏–Ω–æ–π –Æ–∑–µ—Ñ–æ–≤–Ω–æ–π.",
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

# Callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è inline-–º–µ–Ω—é
async def menu_callback_handler(callback: types.CallbackQuery, state: FSMContext):
    data = callback.data
    user_id = callback.from_user.id
    logging.info(f"menu_callback_handler: user={user_id}, data={data}")
    
    if data == "menu_my_data":
        await show_my_data(user_id, state)
    elif data == "menu_progress":
        await show_progress(user_id, state)
    elif data == "menu_new_measurements":
        await start_new_measurements_wrapper(user_id, state)
    elif data == "menu_food_prefs":
        await start_food_preferences_wrapper(user_id, state)
    elif data == "menu_consultation":
        await show_consultation(user_id, state)
    await callback.answer()

def register_menu_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    dp.register_message_handler(show_main_menu, commands=["menu"])
    dp.register_callback_query_handler(menu_callback_handler, lambda c: c.data.startswith("menu_")) 