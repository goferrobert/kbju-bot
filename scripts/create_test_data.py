#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏ "–ü—Ä–æ–≥—Ä–µ—Å—Å"
"""

import sys
import os
from datetime import date, timedelta
from sqlalchemy.orm import Session

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from models.database import SessionLocal, engine
from models.tables import User, UserRecord
from crud.user_crud import create_user, get_user
from crud.record_crud import create_or_update_record

def create_test_user():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    db = SessionLocal()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID 285835433
    existing_user = get_user(db, 285835433)
    
    if not existing_user:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = create_user(
            db,
            telegram_id=285835433,
            username="test_user",
            first_name="–¢–µ—Å—Ç–æ–≤—ã–π",
            last_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            sex="male",
            date_of_birth=date(1990, 1, 1)
        )
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} {user.last_name}")
    else:
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {existing_user.first_name} {existing_user.last_name}")
    
    db.close()
    return existing_user or user

def create_test_records():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑–º–µ—Ä–µ–Ω–∏–π"""
    db = SessionLocal()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = get_user(db, 285835433)
    if not user:
        print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        db.close()
        return
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞
    test_records = [
        # –ù–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (3 –º–µ—Å—è—Ü–∞ –Ω–∞–∑–∞–¥)
        {
            'date': date.today() - timedelta(days=90),
            'weight': 85.0,
            'waist': 95.0,
            'neck': 42.0,
            'height': 180,
            'goal': 'lean',
            'steps': '8000-10000',
            'sport_type': 'running',
            'sport_freq': '3',
            'step_multiplier': 1.2,
            'bodyfat': 22.5
        },
        # –ß–µ—Ä–µ–∑ –º–µ—Å—è—Ü
        {
            'date': date.today() - timedelta(days=60),
            'weight': 82.0,
            'waist': 92.0,
            'neck': 41.5,
            'height': 180,
            'goal': 'lean',
            'steps': '8000-10000',
            'sport_type': 'running',
            'sport_freq': '4',
            'step_multiplier': 1.2,
            'bodyfat': 21.0
        },
        # –ß–µ—Ä–µ–∑ 2 –º–µ—Å—è—Ü–∞
        {
            'date': date.today() - timedelta(days=30),
            'weight': 79.0,
            'waist': 89.0,
            'neck': 41.0,
            'height': 180,
            'goal': 'lean',
            'steps': '8000-10000',
            'sport_type': 'running',
            'sport_freq': '5',
            'step_multiplier': 1.2,
            'bodyfat': 19.5
        },
        # –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        {
            'date': date.today(),
            'weight': 76.0,
            'waist': 86.0,
            'neck': 40.5,
            'height': 180,
            'goal': 'lean',
            'steps': '8000-10000',
            'sport_type': 'running',
            'sport_freq': '5',
            'step_multiplier': 1.2,
            'bodyfat': 18.0
        }
    ]
    
    created_count = 0
    for record_data in test_records:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
        existing_record = db.query(UserRecord).filter(
            UserRecord.telegram_id == 285835433,
            UserRecord.date == record_data['date']
        ).first()
        
        if not existing_record:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            new_record = create_or_update_record(
                db,
                285835433,
                record_data['date'],
                weight=record_data['weight'],
                waist=record_data['waist'],
                neck=record_data['neck'],
                height=record_data['height'],
                goal=record_data['goal'],
                steps=record_data['steps'],
                sport_type=record_data['sport_type'],
                sport_freq=record_data['sport_freq'],
                step_multiplier=record_data['step_multiplier'],
                bodyfat=record_data['bodyfat']
            )
            if new_record:
                created_count += 1
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –Ω–∞ {record_data['date']}: –≤–µ—Å {record_data['weight']} –∫–≥, –∂–∏—Ä {record_data['bodyfat']:.1f}%")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –Ω–∞ {record_data['date']}")
        else:
            print(f"‚ö†Ô∏è –ó–∞–ø–∏—Å—å –Ω–∞ {record_data['date']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    db.close()
    print(f"\nüìä –°–æ–∑–¥–∞–Ω–æ {created_count} –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞...")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = create_test_user()
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏
    create_test_records()
    
    print("\n" + "=" * 50)
    print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã!")
    print("üì± –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é '–ü—Ä–æ–≥—Ä–µ—Å—Å' –≤ –±–æ—Ç–µ")
    print("üìä –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: —Å–±—Ä–æ—Å 9 –∫–≥ –∑–∞ 3 –º–µ—Å—è—Ü–∞")

if __name__ == "__main__":
    main() 