import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from datetime import datetime, timedelta
import os
from typing import List, Dict
from models.tables import UserRecord

def select_records_for_graph(records: List[UserRecord], max_points: int = 7) -> List[UserRecord]:
    """
    –£–º–Ω—ã–π –æ—Ç–±–æ—Ä –∑–∞–ø–∏—Å–µ–π –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞:
    - –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–∞–µ—Ç –ø–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–º–µ—Ä
    - –ú–∞–∫—Å–∏–º—É–º max_points —Ç–æ—á–µ–∫
    - –ï—Å–ª–∏ –∑–∞–ø–∏—Å–µ–π <= max_points, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ
    - –ï—Å–ª–∏ –∑–∞–ø–∏—Å–µ–π > max_points, –≤—ã–±–∏—Ä–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Ç–æ—á–∫–∏
    """
    if len(records) <= max_points:
        return sorted(records, key=lambda x: x.date)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –¥–∞—Ç–µ
    sorted_records = sorted(records, key=lambda x: x.date)
    
    # –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–∞–µ–º –ø–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π
    first_record = sorted_records[0]
    last_record = sorted_records[-1]
    
    # –ï—Å–ª–∏ —É –Ω–∞—Å —Ç–æ–ª—å–∫–æ 2 –∑–∞–ø–∏—Å–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö
    if len(sorted_records) == 2:
        return [first_record, last_record]
    
    # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ç–æ—á–∫–∏
    remaining_slots = max_points - 2  # 2 —É–∂–µ –∑–∞–Ω—è—Ç—ã (–ø–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π)
    
    if remaining_slots <= 0:
        return [first_record, last_record]
    
    # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –∑–∞–ø–∏—Å–∏ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ
    middle_records = sorted_records[1:-1]  # –ò—Å–∫–ª—é—á–∞–µ–º –ø–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π
    
    if len(middle_records) <= remaining_slots:
        # –ï—Å–ª–∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ –æ—Å—Ç–∞–≤—à–∏–º—Å—è —Å–ª–æ—Ç–∞–º
        selected_middle = middle_records
    else:
        # –í—ã–±–∏—Ä–∞–µ–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏
        step = len(middle_records) / (remaining_slots + 1)
        selected_indices = [int(i * step) for i in range(1, remaining_slots + 1)]
        selected_middle = [middle_records[i] for i in selected_indices if i < len(middle_records)]
    
    # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
    result = [first_record] + selected_middle + [last_record]
    
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
    unique_records = []
    seen_dates = set()
    for record in result:
        if record.date not in seen_dates:
            unique_records.append(record)
            seen_dates.add(record.date)
    
    return sorted(unique_records, key=lambda x: x.date)

def get_motivational_message(records) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if len(records) < 2:
        return "üìä –ü–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞. –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤–Ω–æ—Å–∏—Ç—å –∑–∞–º–µ—Ä—ã!"
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –¥–∞—Ç–µ (—Å—Ç–∞—Ä—ã–µ -> –Ω–æ–≤—ã–µ)
    sorted_records = sorted(records, key=lambda x: x.date)
    
    first_record = sorted_records[0]  # –°–∞–º–∞—è —Å—Ç–∞—Ä–∞—è –∑–∞–ø–∏—Å—å
    last_record = sorted_records[-1]  # –°–∞–º–∞—è –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å
    
    weight_change = last_record.weight - first_record.weight
    days_between = (last_record.date - first_record.date).days
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±–º–µ—Ä–æ–≤
    waist_change = last_record.waist - first_record.waist if last_record.waist and first_record.waist else 0
    neck_change = last_record.neck - first_record.neck if last_record.neck and first_record.neck else 0
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    start_date = first_record.date.strftime('%d.%m.%Y')
    end_date = last_record.date.strftime('%d.%m.%Y')
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if weight_change < -2:  # –°–±—Ä–æ—Å –≤–µ—Å–∞
        if days_between <= 30:
            return f"üéâ **–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!**\n\n–ó–∞ {days_between} –¥–Ω–µ–π —Ç—ã —Å–±—Ä–æ—Å–∏–ª {abs(weight_change):.1f} –∫–≥!\n\n–ü–µ—Ä–∏–æ–¥: {start_date} - {end_date}\n\n–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™"
        elif days_between <= 90:
            return f"üî• **–ü–æ—Ç—Ä—è—Å–∞—é—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å!**\n\n–ó–∞ {days_between} –¥–Ω–µ–π —Ç—ã —Å–±—Ä–æ—Å–∏–ª {abs(weight_change):.1f} –∫–≥!\n\n–ü–µ—Ä–∏–æ–¥: {start_date} - {end_date}\n\n–¢—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏! üöÄ"
        else:
            return f"üåü **–ù–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!**\n\n–ó–∞ {days_between} –¥–Ω–µ–π —Ç—ã —Å–±—Ä–æ—Å–∏–ª {abs(weight_change):.1f} –∫–≥!\n\n–ü–µ—Ä–∏–æ–¥: {start_date} - {end_date}\n\n–¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –≥–µ—Ä–æ–π! üëë"
    
    elif weight_change > 2:  # –ù–∞–±–æ—Ä –≤–µ—Å–∞
        if days_between <= 30:
            return f"üí™ **–•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞!**\n\n–ó–∞ {days_between} –¥–Ω–µ–π —Ç—ã –Ω–∞–±—Ä–∞–ª {weight_change:.1f} –∫–≥!\n\n–ü–µ—Ä–∏–æ–¥: {start_date} - {end_date}\n\n–ù–∞—Ä–∞—â–∏–≤–∞–µ—à—å –º—ã—à—Ü—ã! üèãÔ∏è"
        elif days_between <= 90:
            return f"üèãÔ∏è **–û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å!**\n\n–ó–∞ {days_between} –¥–Ω–µ–π —Ç—ã –Ω–∞–±—Ä–∞–ª {weight_change:.1f} –∫–≥!\n\n–ü–µ—Ä–∏–æ–¥: {start_date} - {end_date}\n\n–°—Ç–∞–Ω–æ–≤–∏—à—å—Å—è —Å–∏–ª—å–Ω–µ–µ! üí™"
        else:
            return f"üéØ **–ü–æ—Ç—Ä—è—Å–∞—é—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!**\n\n–ó–∞ {days_between} –¥–Ω–µ–π —Ç—ã –Ω–∞–±—Ä–∞–ª {weight_change:.1f} –∫–≥!\n\n–ü–µ—Ä–∏–æ–¥: {start_date} - {end_date}\n\n–¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –∞—Ç–ª–µ—Ç! üèÜ"
    
    else:  # –°—Ç–∞–±–∏–ª—å–Ω—ã–π –≤–µ—Å
        if waist_change < -3 or neck_change < -2:
            return f"üéØ **–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!**\n\n–í–µ—Å —Å—Ç–∞–±–∏–ª–µ–Ω, –Ω–æ –æ–±–º–µ—Ä—ã —É–º–µ–Ω—å—à–∏–ª–∏—Å—å!\n\n–ü–µ—Ä–∏–æ–¥: {start_date} - {end_date}\n\n–¢—ã —Ç–µ—Ä—è–µ—à—å –∂–∏—Ä –∏ –Ω–∞—Ä–∞—â–∏–≤–∞–µ—à—å –º—ã—à—Ü—ã! üí™"
        else:
            return f"‚úÖ **–°—Ç–∞–±–∏–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å!**\n\n–¢–≤–æ–π –≤–µ—Å —Å—Ç–∞–±–∏–ª–µ–Ω —É–∂–µ {days_between} –¥–Ω–µ–π.\n\n–ü–µ—Ä–∏–æ–¥: {start_date} - {end_date}\n\n–ü—Ä–æ–¥–æ–ª–∂–∞–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∑–¥–æ—Ä–æ–≤—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏! üåü"

def create_progress_graph(records) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
    """
    if len(records) < 2:
        return None
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—ã–π –æ—Ç–±–æ—Ä –∑–∞–ø–∏—Å–µ–π –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    selected_records = select_records_for_graph(records, max_points=7)
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    dates = [record.date for record in selected_records]
    weights = [record.weight for record in selected_records]
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    plt.figure(figsize=(14, 8))
    
    # –ì—Ä–∞—Ñ–∏–∫ –≤–µ—Å–∞
    plt.plot(dates, weights, 'b-o', linewidth=4, markersize=12, markerfacecolor='white', markeredgewidth=3, markeredgecolor='blue')
    plt.title('–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –≤–µ—Å–∞', fontsize=20, fontweight='bold', pad=25)
    plt.ylabel('–í–µ—Å (–∫–≥)', fontsize=16, fontweight='bold')
    plt.xlabel('', fontsize=16, fontweight='bold')  # –£–±–∏—Ä–∞–µ–º –ø–æ–¥–ø–∏—Å—å –æ—Å–∏ X
    plt.grid(True, alpha=0.3, linestyle='--')
    
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –º–µ—Ç–∫–∏ —Å –æ—Å–∏ X
    plt.xticks([])
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫–∏ —Å –∫—Ä—É–ø–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å—è–º–∏ –≤–µ—Å–∞ –∏ –º–∞–ª–µ–Ω—å–∫–∏–º–∏ –¥–∞—Ç–∞–º–∏
    for i, (date, weight) in enumerate(zip(dates, weights)):
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ —Å—Ç–∏–ª–µ DD.MM.YY
        date_str = date.strftime('%d.%m.%y')
        
        # –ü–æ–¥–ø–∏—Å—å –≤–µ—Å–∞ (–∫—Ä—É–ø–Ω–∞—è)
        plt.annotate(f'{weight:.1f} –∫–≥', (date, weight), 
                    textcoords="offset points", 
                    xytext=(0,20), 
                    ha='center', 
                    fontsize=14,
                    fontweight='bold',
                    bbox=dict(boxstyle="round,pad=0.5", facecolor="white", alpha=0.9, edgecolor="blue", linewidth=2))
        
        # –ú–∞–ª–µ–Ω—å–∫–∞—è –¥–∞—Ç–∞ –ø–æ–¥ –∑–Ω–∞—á–µ–Ω–∏–µ–º –≤–µ—Å–∞
        plt.annotate(date_str, (date, weight), 
                    textcoords="offset points", 
                    xytext=(0,-35), 
                    ha='center', 
                    fontsize=10,
                    fontweight='normal',
                    color='gray')
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
    plt.tight_layout(pad=2.0)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs('data', exist_ok=True)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å –≤—ã—Å–æ–∫–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    filename = f'progress_graph_{datetime.now().strftime("%Y%m%d_%H%M%S")}.png'
    filepath = os.path.join('data', filename)
    
    plt.savefig(filepath, dpi=300, bbox_inches='tight', facecolor='white')
    plt.close()
    
    return filepath

def calculate_progress_changes(records):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ–∂–¥—É –ø–µ—Ä–≤–æ–π –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å—å—é
    """
    if len(records) < 2:
        return {
            'weight_change': 0,
            'bodyfat_change': 0,
            'measurements_change': {}
        }
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –¥–∞—Ç–µ (—Å—Ç–∞—Ä—ã–µ -> –Ω–æ–≤—ã–µ)
    sorted_records = sorted(records, key=lambda x: x.date)
    first_record = sorted_records[0]  # –°–∞–º–∞—è —Å—Ç–∞—Ä–∞—è –∑–∞–ø–∏—Å—å
    last_record = sorted_records[-1]  # –°–∞–º–∞—è –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å
    
    weight_change = last_record.weight - first_record.weight
    bodyfat_change = (last_record.bodyfat or 0) - (first_record.bodyfat or 0)
    
    measurements_change = {
        '–¢–∞–ª–∏—è': last_record.waist - first_record.waist,
        '–®–µ—è': last_record.neck - first_record.neck
    }
    
    if last_record.hip and first_record.hip:
        measurements_change['–ë—ë–¥—Ä–∞'] = last_record.hip - first_record.hip
    
    return {
        'weight_change': weight_change,
        'bodyfat_change': bodyfat_change,
        'measurements_change': measurements_change
    } 